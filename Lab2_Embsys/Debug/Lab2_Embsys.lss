
Lab2_Embsys.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00802000  000027a8  0000283c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000296  0080206a  0080206a  000028a6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000028a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00002904  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  00002948  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000107e8  00000000  00000000  00002d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000559b  00000000  00000000  00013558  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000919e  00000000  00000000  00018af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e80  00000000  00000000  00021c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003435d  00000000  00000000  00022b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006dd6  00000000  00000000  00056e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f8  00000000  00000000  0005dc48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c8d2  00000000  00000000  0005e140  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c2       	rjmp	.+1174   	; 0x4d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c2       	rjmp	.+1170   	; 0x4d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c2       	rjmp	.+1166   	; 0x4d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c2       	rjmp	.+1162   	; 0x4d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c2       	rjmp	.+1158   	; 0x4d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c2       	rjmp	.+1154   	; 0x4d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c2       	rjmp	.+1150   	; 0x4d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c2       	rjmp	.+1146   	; 0x4d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c2       	rjmp	.+1138   	; 0x4d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <__vector_39>
      a0:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__vector_40>
      a4:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__vector_41>
      a8:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__vector_42>
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c2       	rjmp	.+1042   	; 0x4d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c2       	rjmp	.+1038   	; 0x4d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c2       	rjmp	.+1030   	; 0x4d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	01 c2       	rjmp	.+1026   	; 0x4d0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ff c1       	rjmp	.+1022   	; 0x4d0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fd c1       	rjmp	.+1018   	; 0x4d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fb c1       	rjmp	.+1014   	; 0x4d0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f9 c1       	rjmp	.+1010   	; 0x4d0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f7 c1       	rjmp	.+1006   	; 0x4d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__vector_71>
     120:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <__vector_72>
     124:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <__vector_73>
     128:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <__vector_74>
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	cd c1       	rjmp	.+922    	; 0x4d0 <__bad_interrupt>
     136:	00 00       	nop
     138:	cb c1       	rjmp	.+918    	; 0x4d0 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c9 c1       	rjmp	.+914    	; 0x4d0 <__bad_interrupt>
     13e:	00 00       	nop
     140:	c7 c1       	rjmp	.+910    	; 0x4d0 <__bad_interrupt>
     142:	00 00       	nop
     144:	c5 c1       	rjmp	.+906    	; 0x4d0 <__bad_interrupt>
     146:	00 00       	nop
     148:	c3 c1       	rjmp	.+902    	; 0x4d0 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c1 c1       	rjmp	.+898    	; 0x4d0 <__bad_interrupt>
     14e:	00 00       	nop
     150:	bf c1       	rjmp	.+894    	; 0x4d0 <__bad_interrupt>
     152:	00 00       	nop
     154:	bd c1       	rjmp	.+890    	; 0x4d0 <__bad_interrupt>
     156:	00 00       	nop
     158:	bb c1       	rjmp	.+886    	; 0x4d0 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	97 c1       	rjmp	.+814    	; 0x4d0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8f c1       	rjmp	.+798    	; 0x4d0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8d c1       	rjmp	.+794    	; 0x4d0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8b c1       	rjmp	.+790    	; 0x4d0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	89 c1       	rjmp	.+786    	; 0x4d0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	87 c1       	rjmp	.+782    	; 0x4d0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	85 c1       	rjmp	.+778    	; 0x4d0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1da0>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7bf0f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x6588>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x6560>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x5588>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1d60>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	e8 ea       	ldi	r30, 0xA8	; 168
     4a6:	f7 e2       	ldi	r31, 0x27	; 39
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	aa 36       	cpi	r26, 0x6A	; 106
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	23 e2       	ldi	r18, 0x23	; 35
     4ba:	aa e6       	ldi	r26, 0x6A	; 106
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a0 30       	cpi	r26, 0x00	; 0
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <main>
     4cc:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <adc_handler>:
 * \retval the raw ADC value from the current ntc_sensor_sample
 */
int16_t ntc_get_raw_value(void)
{
	return ntc_sensor_sample;
}
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	1f 92       	push	r1
     4d8:	1f 92       	push	r1
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	61 30       	cpi	r22, 0x01	; 1
     4e0:	69 f5       	brne	.+90     	; 0x53c <adc_handler+0x6a>
     4e2:	80 91 6b 20 	lds	r24, 0x206B	; 0x80206b <light_sensor_samples.4860>
     4e6:	8f 5f       	subi	r24, 0xFF	; 255
     4e8:	80 93 6b 20 	sts	0x206B, r24	; 0x80206b <light_sensor_samples.4860>
     4ec:	81 30       	cpi	r24, 0x01	; 1
     4ee:	39 f4       	brne	.+14     	; 0x4fe <adc_handler+0x2c>
     4f0:	40 93 6c 20 	sts	0x206C, r20	; 0x80206c <light_sensor_sample>
     4f4:	50 93 6d 20 	sts	0x206D, r21	; 0x80206d <light_sensor_sample+0x1>
     4f8:	10 92 70 20 	sts	0x2070, r1	; 0x802070 <light_sensor_data_ready>
     4fc:	14 c0       	rjmp	.+40     	; 0x526 <adc_handler+0x54>
     4fe:	20 91 6c 20 	lds	r18, 0x206C	; 0x80206c <light_sensor_sample>
     502:	30 91 6d 20 	lds	r19, 0x206D	; 0x80206d <light_sensor_sample+0x1>
     506:	42 0f       	add	r20, r18
     508:	53 1f       	adc	r21, r19
     50a:	56 95       	lsr	r21
     50c:	47 95       	ror	r20
     50e:	40 93 6c 20 	sts	0x206C, r20	; 0x80206c <light_sensor_sample>
     512:	50 93 6d 20 	sts	0x206D, r21	; 0x80206d <light_sensor_sample+0x1>
     516:	84 30       	cpi	r24, 0x04	; 4
     518:	31 f4       	brne	.+12     	; 0x526 <adc_handler+0x54>
     51a:	10 92 6b 20 	sts	0x206B, r1	; 0x80206b <light_sensor_samples.4860>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	80 93 70 20 	sts	0x2070, r24	; 0x802070 <light_sensor_data_ready>
     524:	39 c0       	rjmp	.+114    	; 0x598 <adc_handler+0xc6>
     526:	8f b7       	in	r24, 0x3f	; 63
     528:	8a 83       	std	Y+2, r24	; 0x02
     52a:	f8 94       	cli
     52c:	9a 81       	ldd	r25, Y+2	; 0x02
     52e:	e0 e0       	ldi	r30, 0x00	; 0
     530:	f2 e0       	ldi	r31, 0x02	; 2
     532:	80 81       	ld	r24, Z
     534:	84 60       	ori	r24, 0x04	; 4
     536:	80 83       	st	Z, r24
     538:	9f bf       	out	0x3f, r25	; 63
     53a:	2e c0       	rjmp	.+92     	; 0x598 <adc_handler+0xc6>
     53c:	62 30       	cpi	r22, 0x02	; 2
     53e:	61 f5       	brne	.+88     	; 0x598 <adc_handler+0xc6>
     540:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <__data_end>
     544:	8f 5f       	subi	r24, 0xFF	; 255
     546:	80 93 6a 20 	sts	0x206A, r24	; 0x80206a <__data_end>
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	39 f4       	brne	.+14     	; 0x55c <adc_handler+0x8a>
     54e:	40 93 6e 20 	sts	0x206E, r20	; 0x80206e <ntc_sensor_sample>
     552:	50 93 6f 20 	sts	0x206F, r21	; 0x80206f <ntc_sensor_sample+0x1>
     556:	10 92 71 20 	sts	0x2071, r1	; 0x802071 <ntc_sensor_data_ready>
     55a:	14 c0       	rjmp	.+40     	; 0x584 <adc_handler+0xb2>
     55c:	20 91 6e 20 	lds	r18, 0x206E	; 0x80206e <ntc_sensor_sample>
     560:	30 91 6f 20 	lds	r19, 0x206F	; 0x80206f <ntc_sensor_sample+0x1>
     564:	42 0f       	add	r20, r18
     566:	53 1f       	adc	r21, r19
     568:	56 95       	lsr	r21
     56a:	47 95       	ror	r20
     56c:	40 93 6e 20 	sts	0x206E, r20	; 0x80206e <ntc_sensor_sample>
     570:	50 93 6f 20 	sts	0x206F, r21	; 0x80206f <ntc_sensor_sample+0x1>
     574:	84 30       	cpi	r24, 0x04	; 4
     576:	31 f4       	brne	.+12     	; 0x584 <adc_handler+0xb2>
     578:	10 92 6a 20 	sts	0x206A, r1	; 0x80206a <__data_end>
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 71 20 	sts	0x2071, r24	; 0x802071 <ntc_sensor_data_ready>
     582:	0a c0       	rjmp	.+20     	; 0x598 <adc_handler+0xc6>
     584:	8f b7       	in	r24, 0x3f	; 63
     586:	89 83       	std	Y+1, r24	; 0x01
     588:	f8 94       	cli
     58a:	99 81       	ldd	r25, Y+1	; 0x01
     58c:	e0 e0       	ldi	r30, 0x00	; 0
     58e:	f2 e0       	ldi	r31, 0x02	; 2
     590:	80 81       	ld	r24, Z
     592:	88 60       	ori	r24, 0x08	; 8
     594:	80 83       	st	Z, r24
     596:	9f bf       	out	0x3f, r25	; 63
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <ntc_data_is_ready>:
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	1f 92       	push	r1
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	8f b7       	in	r24, 0x3f	; 63
     5ae:	89 83       	std	Y+1, r24	; 0x01
     5b0:	f8 94       	cli
     5b2:	99 81       	ldd	r25, Y+1	; 0x01
     5b4:	80 91 71 20 	lds	r24, 0x2071	; 0x802071 <ntc_sensor_data_ready>
     5b8:	88 23       	and	r24, r24
     5ba:	21 f0       	breq	.+8      	; 0x5c4 <ntc_data_is_ready+0x22>
     5bc:	10 92 71 20 	sts	0x2071, r1	; 0x802071 <ntc_sensor_data_ready>
     5c0:	9f bf       	out	0x3f, r25	; 63
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <ntc_data_is_ready+0x24>
     5c4:	9f bf       	out	0x3f, r25	; 63
     5c6:	0f 90       	pop	r0
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <lightsensor_data_is_ready>:
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	1f 92       	push	r1
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	8f b7       	in	r24, 0x3f	; 63
     5da:	89 83       	std	Y+1, r24	; 0x01
     5dc:	f8 94       	cli
     5de:	99 81       	ldd	r25, Y+1	; 0x01
     5e0:	80 91 70 20 	lds	r24, 0x2070	; 0x802070 <light_sensor_data_ready>
     5e4:	88 23       	and	r24, r24
     5e6:	21 f0       	breq	.+8      	; 0x5f0 <lightsensor_data_is_ready+0x22>
     5e8:	10 92 70 20 	sts	0x2070, r1	; 0x802070 <light_sensor_data_ready>
     5ec:	9f bf       	out	0x3f, r25	; 63
     5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <lightsensor_data_is_ready+0x24>
     5f0:	9f bf       	out	0x3f, r25	; 63
     5f2:	0f 90       	pop	r0
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <adc_sensors_init>:
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	2b 97       	sbiw	r28, 0x0b	; 11
     606:	cd bf       	out	0x3d, r28	; 61
     608:	de bf       	out	0x3e, r29	; 62
     60a:	be 01       	movw	r22, r28
     60c:	6f 5f       	subi	r22, 0xFF	; 255
     60e:	7f 4f       	sbci	r23, 0xFF	; 255
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	92 e0       	ldi	r25, 0x02	; 2
     614:	0e 94 a0 0c 	call	0x1940	; 0x1940 <adc_read_configuration>
     618:	ae 01       	movw	r20, r28
     61a:	48 5f       	subi	r20, 0xF8	; 248
     61c:	5f 4f       	sbci	r21, 0xFF	; 255
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	92 e0       	ldi	r25, 0x02	; 2
     624:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <adcch_read_configuration>
     628:	8a 81       	ldd	r24, Y+2	; 0x02
     62a:	9b 81       	ldd	r25, Y+3	; 0x03
     62c:	9f 78       	andi	r25, 0x8F	; 143
     62e:	90 61       	ori	r25, 0x10	; 16
     630:	9b 83       	std	Y+3, r25	; 0x03
     632:	92 e0       	ldi	r25, 0x02	; 2
     634:	9d 83       	std	Y+5, r25	; 0x05
     636:	81 7e       	andi	r24, 0xE1	; 225
     638:	80 61       	ori	r24, 0x10	; 16
     63a:	8a 83       	std	Y+2, r24	; 0x02
     63c:	1c 82       	std	Y+4, r1	; 0x04
     63e:	be 01       	movw	r22, r28
     640:	6f 5f       	subi	r22, 0xFF	; 255
     642:	7f 4f       	sbci	r23, 0xFF	; 255
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	0e 94 3a 0c 	call	0x1874	; 0x1874 <adc_write_configuration>
     64c:	69 e6       	ldi	r22, 0x69	; 105
     64e:	72 e0       	ldi	r23, 0x02	; 2
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	f7 d6       	rcall	.+3566   	; 0x1444 <adc_set_callback>
     656:	11 e0       	ldi	r17, 0x01	; 1
     658:	18 87       	std	Y+8, r17	; 0x08
     65a:	19 86       	std	Y+9, r1	; 0x09
     65c:	8a 85       	ldd	r24, Y+10	; 0x0a
     65e:	80 7f       	andi	r24, 0xF0	; 240
     660:	81 60       	ori	r24, 0x01	; 1
     662:	8a 87       	std	Y+10, r24	; 0x0a
     664:	ae 01       	movw	r20, r28
     666:	48 5f       	subi	r20, 0xF8	; 248
     668:	5f 4f       	sbci	r21, 0xFF	; 255
     66a:	61 e0       	ldi	r22, 0x01	; 1
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	92 e0       	ldi	r25, 0x02	; 2
     670:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <adcch_write_configuration>
     674:	18 87       	std	Y+8, r17	; 0x08
     676:	88 e0       	ldi	r24, 0x08	; 8
     678:	89 87       	std	Y+9, r24	; 0x09
     67a:	ae 01       	movw	r20, r28
     67c:	48 5f       	subi	r20, 0xF8	; 248
     67e:	5f 4f       	sbci	r21, 0xFF	; 255
     680:	62 e0       	ldi	r22, 0x02	; 2
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	92 e0       	ldi	r25, 0x02	; 2
     686:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <adcch_write_configuration>
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	92 e0       	ldi	r25, 0x02	; 2
     68e:	36 d7       	rcall	.+3692   	; 0x14fc <adc_enable>
     690:	2b 96       	adiw	r28, 0x0b	; 11
     692:	cd bf       	out	0x3d, r28	; 61
     694:	de bf       	out	0x3e, r29	; 62
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	08 95       	ret

0000069e <ntc_get_temperature>:
 * \note The result is inaccurate for temperatures outside 5-45 degrees.
 *
 * \retval the temperature in Celsius
 */
int8_t ntc_get_temperature(void)
{
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
	int8_t retval = 0;
	float ntc_sample = ntc_sensor_sample;
     6a2:	c0 91 6e 20 	lds	r28, 0x206E	; 0x80206e <ntc_sensor_sample>
     6a6:	d0 91 6f 20 	lds	r29, 0x206F	; 0x80206f <ntc_sensor_sample+0x1>
     6aa:	be 01       	movw	r22, r28
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
	if (ntc_sensor_sample > 697) {
		retval = (int8_t)((-0.0295 * ntc_sample) + 40.5);
	} if (ntc_sensor_sample > 420) {
     6b4:	c5 3a       	cpi	r28, 0xA5	; 165
     6b6:	d1 40       	sbci	r29, 0x01	; 1
     6b8:	80 f0       	brcs	.+32     	; 0x6da <ntc_get_temperature+0x3c>
		retval = (int8_t)((-0.0474 * ntc_sample) + 53.3);
     6ba:	21 e8       	ldi	r18, 0x81	; 129
     6bc:	36 e2       	ldi	r19, 0x26	; 38
     6be:	42 e4       	ldi	r20, 0x42	; 66
     6c0:	5d eb       	ldi	r21, 0xBD	; 189
     6c2:	0e 94 92 10 	call	0x2124	; 0x2124 <__mulsf3>
     6c6:	23 e3       	ldi	r18, 0x33	; 51
     6c8:	33 e3       	ldi	r19, 0x33	; 51
     6ca:	45 e5       	ldi	r20, 0x55	; 85
     6cc:	52 e4       	ldi	r21, 0x42	; 66
     6ce:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__addsf3>
     6d2:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__fixsfsi>
     6d6:	86 2f       	mov	r24, r22
     6d8:	0f c0       	rjmp	.+30     	; 0x6f8 <ntc_get_temperature+0x5a>
	} else {
		retval = (int8_t)((-0.0777 * ntc_sample) + 65.1);
     6da:	2d e2       	ldi	r18, 0x2D	; 45
     6dc:	31 e2       	ldi	r19, 0x21	; 33
     6de:	4f e9       	ldi	r20, 0x9F	; 159
     6e0:	5d eb       	ldi	r21, 0xBD	; 189
     6e2:	0e 94 92 10 	call	0x2124	; 0x2124 <__mulsf3>
     6e6:	23 e3       	ldi	r18, 0x33	; 51
     6e8:	33 e3       	ldi	r19, 0x33	; 51
     6ea:	42 e8       	ldi	r20, 0x82	; 130
     6ec:	52 e4       	ldi	r21, 0x42	; 66
     6ee:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__addsf3>
     6f2:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__fixsfsi>
     6f6:	86 2f       	mov	r24, r22
	}
	return retval;
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	08 95       	ret

000006fe <lightsensor_get_raw_value>:
 * \retval the raw ADC value from the current ntc_sensor_sample
 */
int16_t lightsensor_get_raw_value(void)
{
	return light_sensor_sample;
}
     6fe:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <light_sensor_sample>
     702:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <light_sensor_sample+0x1>
     706:	08 95       	ret

00000708 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     708:	04 c0       	rjmp	.+8      	; 0x712 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     70a:	61 50       	subi	r22, 0x01	; 1
     70c:	71 09       	sbc	r23, r1
     70e:	81 09       	sbc	r24, r1
     710:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     712:	61 15       	cp	r22, r1
     714:	71 05       	cpc	r23, r1
     716:	81 05       	cpc	r24, r1
     718:	91 05       	cpc	r25, r1
     71a:	b9 f7       	brne	.-18     	; 0x70a <__portable_avr_delay_cycles+0x2>
     71c:	08 95       	ret

0000071e <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     71e:	bf 92       	push	r11
     720:	cf 92       	push	r12
     722:	df 92       	push	r13
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	1f 92       	push	r1
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     736:	00 e0       	ldi	r16, 0x00	; 0
     738:	16 e0       	ldi	r17, 0x06	; 6
     73a:	68 94       	set
     73c:	ff 24       	eor	r15, r15
     73e:	f3 f8       	bld	r15, 3
     740:	f8 01       	movw	r30, r16
     742:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     744:	64 e0       	ldi	r22, 0x04	; 4
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	dd df       	rcall	.-70     	; 0x708 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     74e:	f8 01       	movw	r30, r16
     750:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     752:	64 e0       	ldi	r22, 0x04	; 4
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	d6 df       	rcall	.-84     	; 0x708 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     75c:	0f 2e       	mov	r0, r31
     75e:	fb e2       	ldi	r31, 0x2B	; 43
     760:	bf 2e       	mov	r11, r31
     762:	f0 2d       	mov	r31, r0
     764:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     766:	80 ea       	ldi	r24, 0xA0	; 160
     768:	99 e0       	ldi	r25, 0x09	; 9
     76a:	d4 d4       	rcall	.+2472   	; 0x1114 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     76c:	c1 2c       	mov	r12, r1
     76e:	d1 2c       	mov	r13, r1
     770:	76 01       	movw	r14, r12
     772:	00 e4       	ldi	r16, 0x40	; 64
     774:	12 e4       	ldi	r17, 0x42	; 66
     776:	2f e0       	ldi	r18, 0x0F	; 15
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	43 e0       	ldi	r20, 0x03	; 3
     77c:	be 01       	movw	r22, r28
     77e:	6f 5f       	subi	r22, 0xFF	; 255
     780:	7f 4f       	sbci	r23, 0xFF	; 255
     782:	80 ea       	ldi	r24, 0xA0	; 160
     784:	99 e0       	ldi	r25, 0x09	; 9
     786:	f5 d4       	rcall	.+2538   	; 0x1172 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     788:	00 e6       	ldi	r16, 0x60	; 96
     78a:	16 e0       	ldi	r17, 0x06	; 6
     78c:	ff 24       	eor	r15, r15
     78e:	f3 94       	inc	r15
     790:	f8 01       	movw	r30, r16
     792:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     794:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     796:	be 01       	movw	r22, r28
     798:	6f 5f       	subi	r22, 0xFF	; 255
     79a:	7f 4f       	sbci	r23, 0xFF	; 255
     79c:	80 ea       	ldi	r24, 0xA0	; 160
     79e:	99 e0       	ldi	r25, 0x09	; 9
     7a0:	02 d5       	rcall	.+2564   	; 0x11a6 <usart_spi_select_device>
     7a2:	f8 01       	movw	r30, r16
     7a4:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7a6:	e0 ea       	ldi	r30, 0xA0	; 160
     7a8:	f9 e0       	ldi	r31, 0x09	; 9
     7aa:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7ac:	85 ff       	sbrs	r24, 5
     7ae:	fd cf       	rjmp	.-6      	; 0x7aa <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7b0:	80 ea       	ldi	r24, 0xA0	; 160
     7b2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7b6:	e0 ea       	ldi	r30, 0xA0	; 160
     7b8:	f9 e0       	ldi	r31, 0x09	; 9
     7ba:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7bc:	86 ff       	sbrs	r24, 6
     7be:	fd cf       	rjmp	.-6      	; 0x7ba <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7c0:	e0 ea       	ldi	r30, 0xA0	; 160
     7c2:	f9 e0       	ldi	r31, 0x09	; 9
     7c4:	80 e4       	ldi	r24, 0x40	; 64
     7c6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7c8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7ca:	be 01       	movw	r22, r28
     7cc:	6f 5f       	subi	r22, 0xFF	; 255
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	80 ea       	ldi	r24, 0xA0	; 160
     7d2:	99 e0       	ldi	r25, 0x09	; 9
     7d4:	fe d4       	rcall	.+2556   	; 0x11d2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7d6:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7d8:	89 83       	std	Y+1, r24	; 0x01
     7da:	be 01       	movw	r22, r28
     7dc:	6f 5f       	subi	r22, 0xFF	; 255
     7de:	7f 4f       	sbci	r23, 0xFF	; 255
     7e0:	80 ea       	ldi	r24, 0xA0	; 160
     7e2:	99 e0       	ldi	r25, 0x09	; 9
     7e4:	e0 d4       	rcall	.+2496   	; 0x11a6 <usart_spi_select_device>
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7ec:	e0 ea       	ldi	r30, 0xA0	; 160
     7ee:	f9 e0       	ldi	r31, 0x09	; 9
     7f0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7f2:	85 ff       	sbrs	r24, 5
     7f4:	fd cf       	rjmp	.-6      	; 0x7f0 <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7f6:	86 ea       	ldi	r24, 0xA6	; 166
     7f8:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7fc:	e0 ea       	ldi	r30, 0xA0	; 160
     7fe:	f9 e0       	ldi	r31, 0x09	; 9
     800:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     802:	86 ff       	sbrs	r24, 6
     804:	fd cf       	rjmp	.-6      	; 0x800 <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     806:	e0 ea       	ldi	r30, 0xA0	; 160
     808:	f9 e0       	ldi	r31, 0x09	; 9
     80a:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     80c:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     80e:	80 81       	ld	r24, Z
     810:	be 01       	movw	r22, r28
     812:	6f 5f       	subi	r22, 0xFF	; 255
     814:	7f 4f       	sbci	r23, 0xFF	; 255
     816:	80 ea       	ldi	r24, 0xA0	; 160
     818:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     81a:	db d4       	rcall	.+2486   	; 0x11d2 <usart_spi_deselect_device>
     81c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     81e:	89 83       	std	Y+1, r24	; 0x01
     820:	be 01       	movw	r22, r28
     822:	6f 5f       	subi	r22, 0xFF	; 255
     824:	7f 4f       	sbci	r23, 0xFF	; 255
     826:	80 ea       	ldi	r24, 0xA0	; 160
     828:	99 e0       	ldi	r25, 0x09	; 9
     82a:	bd d4       	rcall	.+2426   	; 0x11a6 <usart_spi_select_device>
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     832:	e0 ea       	ldi	r30, 0xA0	; 160
     834:	f9 e0       	ldi	r31, 0x09	; 9
     836:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     838:	85 ff       	sbrs	r24, 5
     83a:	fd cf       	rjmp	.-6      	; 0x836 <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     83c:	88 ec       	ldi	r24, 0xC8	; 200
     83e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     842:	e0 ea       	ldi	r30, 0xA0	; 160
     844:	f9 e0       	ldi	r31, 0x09	; 9
     846:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     848:	86 ff       	sbrs	r24, 6
     84a:	fd cf       	rjmp	.-6      	; 0x846 <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     84c:	e0 ea       	ldi	r30, 0xA0	; 160
     84e:	f9 e0       	ldi	r31, 0x09	; 9
     850:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     852:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     854:	80 81       	ld	r24, Z
     856:	be 01       	movw	r22, r28
     858:	6f 5f       	subi	r22, 0xFF	; 255
     85a:	7f 4f       	sbci	r23, 0xFF	; 255
     85c:	80 ea       	ldi	r24, 0xA0	; 160
     85e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     860:	b8 d4       	rcall	.+2416   	; 0x11d2 <usart_spi_deselect_device>
     862:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     864:	89 83       	std	Y+1, r24	; 0x01
     866:	be 01       	movw	r22, r28
     868:	6f 5f       	subi	r22, 0xFF	; 255
     86a:	7f 4f       	sbci	r23, 0xFF	; 255
     86c:	80 ea       	ldi	r24, 0xA0	; 160
     86e:	99 e0       	ldi	r25, 0x09	; 9
     870:	9a d4       	rcall	.+2356   	; 0x11a6 <usart_spi_select_device>
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     878:	e0 ea       	ldi	r30, 0xA0	; 160
     87a:	f9 e0       	ldi	r31, 0x09	; 9
     87c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     87e:	85 ff       	sbrs	r24, 5
     880:	fd cf       	rjmp	.-6      	; 0x87c <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     882:	82 ea       	ldi	r24, 0xA2	; 162
     884:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     888:	e0 ea       	ldi	r30, 0xA0	; 160
     88a:	f9 e0       	ldi	r31, 0x09	; 9
     88c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     88e:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     890:	fd cf       	rjmp	.-6      	; 0x88c <st7565r_init+0x16e>
     892:	e0 ea       	ldi	r30, 0xA0	; 160
     894:	f9 e0       	ldi	r31, 0x09	; 9
     896:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     898:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     89a:	80 81       	ld	r24, Z
     89c:	be 01       	movw	r22, r28
     89e:	6f 5f       	subi	r22, 0xFF	; 255
     8a0:	7f 4f       	sbci	r23, 0xFF	; 255
     8a2:	80 ea       	ldi	r24, 0xA0	; 160
     8a4:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8a6:	95 d4       	rcall	.+2346   	; 0x11d2 <usart_spi_deselect_device>
     8a8:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8aa:	89 83       	std	Y+1, r24	; 0x01
     8ac:	be 01       	movw	r22, r28
     8ae:	6f 5f       	subi	r22, 0xFF	; 255
     8b0:	7f 4f       	sbci	r23, 0xFF	; 255
     8b2:	80 ea       	ldi	r24, 0xA0	; 160
     8b4:	99 e0       	ldi	r25, 0x09	; 9
     8b6:	77 d4       	rcall	.+2286   	; 0x11a6 <usart_spi_select_device>
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8be:	e0 ea       	ldi	r30, 0xA0	; 160
     8c0:	f9 e0       	ldi	r31, 0x09	; 9
     8c2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8c4:	85 ff       	sbrs	r24, 5
     8c6:	fd cf       	rjmp	.-6      	; 0x8c2 <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8c8:	8f e2       	ldi	r24, 0x2F	; 47
     8ca:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8ce:	e0 ea       	ldi	r30, 0xA0	; 160
     8d0:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8d2:	81 81       	ldd	r24, Z+1	; 0x01
     8d4:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8d6:	fd cf       	rjmp	.-6      	; 0x8d2 <st7565r_init+0x1b4>
     8d8:	e0 ea       	ldi	r30, 0xA0	; 160
     8da:	f9 e0       	ldi	r31, 0x09	; 9
     8dc:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8de:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8e0:	80 81       	ld	r24, Z
     8e2:	be 01       	movw	r22, r28
     8e4:	6f 5f       	subi	r22, 0xFF	; 255
     8e6:	7f 4f       	sbci	r23, 0xFF	; 255
     8e8:	80 ea       	ldi	r24, 0xA0	; 160
     8ea:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8ec:	72 d4       	rcall	.+2276   	; 0x11d2 <usart_spi_deselect_device>
     8ee:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8f0:	89 83       	std	Y+1, r24	; 0x01
     8f2:	be 01       	movw	r22, r28
     8f4:	6f 5f       	subi	r22, 0xFF	; 255
     8f6:	7f 4f       	sbci	r23, 0xFF	; 255
     8f8:	80 ea       	ldi	r24, 0xA0	; 160
     8fa:	99 e0       	ldi	r25, 0x09	; 9
     8fc:	54 d4       	rcall	.+2216   	; 0x11a6 <usart_spi_select_device>
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     904:	e0 ea       	ldi	r30, 0xA0	; 160
     906:	f9 e0       	ldi	r31, 0x09	; 9
     908:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     90a:	85 ff       	sbrs	r24, 5
     90c:	fd cf       	rjmp	.-6      	; 0x908 <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     90e:	88 ef       	ldi	r24, 0xF8	; 248
     910:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     914:	e0 ea       	ldi	r30, 0xA0	; 160
     916:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     918:	81 81       	ldd	r24, Z+1	; 0x01
     91a:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     91c:	fd cf       	rjmp	.-6      	; 0x918 <st7565r_init+0x1fa>
     91e:	e0 ea       	ldi	r30, 0xA0	; 160
     920:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     922:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     924:	81 83       	std	Z+1, r24	; 0x01
     926:	80 81       	ld	r24, Z
     928:	be 01       	movw	r22, r28
     92a:	6f 5f       	subi	r22, 0xFF	; 255
     92c:	7f 4f       	sbci	r23, 0xFF	; 255
     92e:	80 ea       	ldi	r24, 0xA0	; 160
     930:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     932:	4f d4       	rcall	.+2206   	; 0x11d2 <usart_spi_deselect_device>
     934:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     936:	89 83       	std	Y+1, r24	; 0x01
     938:	be 01       	movw	r22, r28
     93a:	6f 5f       	subi	r22, 0xFF	; 255
     93c:	7f 4f       	sbci	r23, 0xFF	; 255
     93e:	80 ea       	ldi	r24, 0xA0	; 160
     940:	99 e0       	ldi	r25, 0x09	; 9
     942:	31 d4       	rcall	.+2146   	; 0x11a6 <usart_spi_select_device>
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     94a:	e0 ea       	ldi	r30, 0xA0	; 160
     94c:	f9 e0       	ldi	r31, 0x09	; 9
     94e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     950:	85 ff       	sbrs	r24, 5
     952:	fd cf       	rjmp	.-6      	; 0x94e <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     954:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     958:	e0 ea       	ldi	r30, 0xA0	; 160
     95a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     95c:	81 81       	ldd	r24, Z+1	; 0x01
     95e:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     960:	fd cf       	rjmp	.-6      	; 0x95c <st7565r_init+0x23e>
     962:	e0 ea       	ldi	r30, 0xA0	; 160
     964:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     966:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     968:	81 83       	std	Z+1, r24	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	be 01       	movw	r22, r28
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	80 ea       	ldi	r24, 0xA0	; 160
     974:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     976:	2d d4       	rcall	.+2138   	; 0x11d2 <usart_spi_deselect_device>
     978:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     97a:	89 83       	std	Y+1, r24	; 0x01
     97c:	be 01       	movw	r22, r28
     97e:	6f 5f       	subi	r22, 0xFF	; 255
     980:	7f 4f       	sbci	r23, 0xFF	; 255
     982:	80 ea       	ldi	r24, 0xA0	; 160
     984:	99 e0       	ldi	r25, 0x09	; 9
     986:	0f d4       	rcall	.+2078   	; 0x11a6 <usart_spi_select_device>
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     98e:	e0 ea       	ldi	r30, 0xA0	; 160
     990:	f9 e0       	ldi	r31, 0x09	; 9
     992:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     994:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     996:	fd cf       	rjmp	.-6      	; 0x992 <st7565r_init+0x274>
     998:	81 e2       	ldi	r24, 0x21	; 33
     99a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     99e:	e0 ea       	ldi	r30, 0xA0	; 160
     9a0:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9a2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9a4:	86 ff       	sbrs	r24, 6
     9a6:	fd cf       	rjmp	.-6      	; 0x9a2 <st7565r_init+0x284>
     9a8:	e0 ea       	ldi	r30, 0xA0	; 160
     9aa:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9ac:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9ae:	81 83       	std	Z+1, r24	; 0x01
     9b0:	80 81       	ld	r24, Z
     9b2:	be 01       	movw	r22, r28
     9b4:	6f 5f       	subi	r22, 0xFF	; 255
     9b6:	7f 4f       	sbci	r23, 0xFF	; 255
     9b8:	80 ea       	ldi	r24, 0xA0	; 160
     9ba:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9bc:	0a d4       	rcall	.+2068   	; 0x11d2 <usart_spi_deselect_device>
     9be:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9c0:	89 83       	std	Y+1, r24	; 0x01
     9c2:	be 01       	movw	r22, r28
     9c4:	6f 5f       	subi	r22, 0xFF	; 255
     9c6:	7f 4f       	sbci	r23, 0xFF	; 255
     9c8:	80 ea       	ldi	r24, 0xA0	; 160
     9ca:	99 e0       	ldi	r25, 0x09	; 9
     9cc:	ec d3       	rcall	.+2008   	; 0x11a6 <usart_spi_select_device>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9d4:	e0 ea       	ldi	r30, 0xA0	; 160
     9d6:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9d8:	81 81       	ldd	r24, Z+1	; 0x01
     9da:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9dc:	fd cf       	rjmp	.-6      	; 0x9d8 <st7565r_init+0x2ba>
     9de:	81 e8       	ldi	r24, 0x81	; 129
     9e0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9e4:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9e6:	f9 e0       	ldi	r31, 0x09	; 9
     9e8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9ea:	86 ff       	sbrs	r24, 6
     9ec:	fd cf       	rjmp	.-6      	; 0x9e8 <st7565r_init+0x2ca>
     9ee:	e0 ea       	ldi	r30, 0xA0	; 160
     9f0:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9f2:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9f4:	81 83       	std	Z+1, r24	; 0x01
     9f6:	80 81       	ld	r24, Z
     9f8:	be 01       	movw	r22, r28
     9fa:	6f 5f       	subi	r22, 0xFF	; 255
     9fc:	7f 4f       	sbci	r23, 0xFF	; 255
     9fe:	80 ea       	ldi	r24, 0xA0	; 160
     a00:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a02:	e7 d3       	rcall	.+1998   	; 0x11d2 <usart_spi_deselect_device>
     a04:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a06:	89 83       	std	Y+1, r24	; 0x01
     a08:	be 01       	movw	r22, r28
     a0a:	6f 5f       	subi	r22, 0xFF	; 255
     a0c:	7f 4f       	sbci	r23, 0xFF	; 255
     a0e:	80 ea       	ldi	r24, 0xA0	; 160
     a10:	99 e0       	ldi	r25, 0x09	; 9
     a12:	c9 d3       	rcall	.+1938   	; 0x11a6 <usart_spi_select_device>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a1a:	e0 ea       	ldi	r30, 0xA0	; 160
     a1c:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a1e:	81 81       	ldd	r24, Z+1	; 0x01
     a20:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a22:	fd cf       	rjmp	.-6      	; 0xa1e <st7565r_init+0x300>
     a24:	81 e2       	ldi	r24, 0x21	; 33
     a26:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a2a:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a2c:	f9 e0       	ldi	r31, 0x09	; 9
     a2e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a30:	86 ff       	sbrs	r24, 6
     a32:	fd cf       	rjmp	.-6      	; 0xa2e <st7565r_init+0x310>
     a34:	e0 ea       	ldi	r30, 0xA0	; 160
     a36:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a38:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a3a:	81 83       	std	Z+1, r24	; 0x01
     a3c:	80 81       	ld	r24, Z
     a3e:	be 01       	movw	r22, r28
     a40:	6f 5f       	subi	r22, 0xFF	; 255
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	80 ea       	ldi	r24, 0xA0	; 160
     a46:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a48:	c4 d3       	rcall	.+1928   	; 0x11d2 <usart_spi_deselect_device>
     a4a:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	be 01       	movw	r22, r28
     a50:	6f 5f       	subi	r22, 0xFF	; 255
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
     a54:	80 ea       	ldi	r24, 0xA0	; 160
     a56:	99 e0       	ldi	r25, 0x09	; 9
     a58:	a6 d3       	rcall	.+1868   	; 0x11a6 <usart_spi_select_device>
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a60:	e0 ea       	ldi	r30, 0xA0	; 160
     a62:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a64:	81 81       	ldd	r24, Z+1	; 0x01
     a66:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a68:	fd cf       	rjmp	.-6      	; 0xa64 <st7565r_init+0x346>
     a6a:	8f ea       	ldi	r24, 0xAF	; 175
     a6c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a70:	e0 ea       	ldi	r30, 0xA0	; 160
     a72:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a74:	81 81       	ldd	r24, Z+1	; 0x01
     a76:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a78:	fd cf       	rjmp	.-6      	; 0xa74 <st7565r_init+0x356>
     a7a:	e0 ea       	ldi	r30, 0xA0	; 160
     a7c:	f9 e0       	ldi	r31, 0x09	; 9
     a7e:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a80:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a82:	80 81       	ld	r24, Z
     a84:	be 01       	movw	r22, r28
     a86:	6f 5f       	subi	r22, 0xFF	; 255
     a88:	7f 4f       	sbci	r23, 0xFF	; 255
     a8a:	80 ea       	ldi	r24, 0xA0	; 160
     a8c:	99 e0       	ldi	r25, 0x09	; 9
     a8e:	a1 d3       	rcall	.+1858   	; 0x11d2 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     a90:	0f 90       	pop	r0
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	df 90       	pop	r13
     aa0:	cf 90       	pop	r12
     aa2:	bf 90       	pop	r11
     aa4:	08 95       	ret

00000aa6 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	1f 92       	push	r1
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
     ab6:	08 2f       	mov	r16, r24
     ab8:	f6 2e       	mov	r15, r22
     aba:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     abc:	a5 d3       	rcall	.+1866   	; 0x1208 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     abe:	0f 70       	andi	r16, 0x0F	; 15
     ac0:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     ac2:	8b e2       	ldi	r24, 0x2B	; 43
     ac4:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     ac6:	be 01       	movw	r22, r28
     ac8:	6f 5f       	subi	r22, 0xFF	; 255
     aca:	7f 4f       	sbci	r23, 0xFF	; 255
     acc:	80 ea       	ldi	r24, 0xA0	; 160
     ace:	99 e0       	ldi	r25, 0x09	; 9
     ad0:	6a d3       	rcall	.+1748   	; 0x11a6 <usart_spi_select_device>
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     ad8:	e0 ea       	ldi	r30, 0xA0	; 160
     ada:	f9 e0       	ldi	r31, 0x09	; 9
     adc:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     ade:	95 ff       	sbrs	r25, 5
     ae0:	fd cf       	rjmp	.-6      	; 0xadc <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     ae2:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     ae6:	e0 ea       	ldi	r30, 0xA0	; 160
     ae8:	f9 e0       	ldi	r31, 0x09	; 9
     aea:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     aec:	86 ff       	sbrs	r24, 6
     aee:	fd cf       	rjmp	.-6      	; 0xaea <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     af0:	e0 ea       	ldi	r30, 0xA0	; 160
     af2:	f9 e0       	ldi	r31, 0x09	; 9
     af4:	80 e4       	ldi	r24, 0x40	; 64
     af6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     af8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     afa:	be 01       	movw	r22, r28
     afc:	6f 5f       	subi	r22, 0xFF	; 255
     afe:	7f 4f       	sbci	r23, 0xFF	; 255
     b00:	80 ea       	ldi	r24, 0xA0	; 160
     b02:	99 e0       	ldi	r25, 0x09	; 9
     b04:	66 d3       	rcall	.+1740   	; 0x11d2 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     b06:	0f 2d       	mov	r16, r15
     b08:	0f 77       	andi	r16, 0x7F	; 127
     b0a:	02 95       	swap	r16
     b0c:	0f 70       	andi	r16, 0x0F	; 15
     b0e:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     b10:	8b e2       	ldi	r24, 0x2B	; 43
     b12:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b14:	be 01       	movw	r22, r28
     b16:	6f 5f       	subi	r22, 0xFF	; 255
     b18:	7f 4f       	sbci	r23, 0xFF	; 255
     b1a:	80 ea       	ldi	r24, 0xA0	; 160
     b1c:	99 e0       	ldi	r25, 0x09	; 9
     b1e:	43 d3       	rcall	.+1670   	; 0x11a6 <usart_spi_select_device>
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     b26:	e0 ea       	ldi	r30, 0xA0	; 160
     b28:	f9 e0       	ldi	r31, 0x09	; 9
     b2a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     b2c:	85 ff       	sbrs	r24, 5
     b2e:	fd cf       	rjmp	.-6      	; 0xb2a <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     b30:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     b34:	e0 ea       	ldi	r30, 0xA0	; 160
     b36:	f9 e0       	ldi	r31, 0x09	; 9
     b38:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     b3a:	86 ff       	sbrs	r24, 6
     b3c:	fd cf       	rjmp	.-6      	; 0xb38 <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     b3e:	e0 ea       	ldi	r30, 0xA0	; 160
     b40:	f9 e0       	ldi	r31, 0x09	; 9
     b42:	80 e4       	ldi	r24, 0x40	; 64
     b44:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     b46:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     b48:	be 01       	movw	r22, r28
     b4a:	6f 5f       	subi	r22, 0xFF	; 255
     b4c:	7f 4f       	sbci	r23, 0xFF	; 255
     b4e:	80 ea       	ldi	r24, 0xA0	; 160
     b50:	99 e0       	ldi	r25, 0x09	; 9
     b52:	3f d3       	rcall	.+1662   	; 0x11d2 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     b54:	0f 2d       	mov	r16, r15
     b56:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     b58:	8b e2       	ldi	r24, 0x2B	; 43
     b5a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b5c:	be 01       	movw	r22, r28
     b5e:	6f 5f       	subi	r22, 0xFF	; 255
     b60:	7f 4f       	sbci	r23, 0xFF	; 255
     b62:	80 ea       	ldi	r24, 0xA0	; 160
     b64:	99 e0       	ldi	r25, 0x09	; 9
     b66:	1f d3       	rcall	.+1598   	; 0x11a6 <usart_spi_select_device>
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     b6e:	e0 ea       	ldi	r30, 0xA0	; 160
     b70:	f9 e0       	ldi	r31, 0x09	; 9
     b72:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     b74:	85 ff       	sbrs	r24, 5
     b76:	fd cf       	rjmp	.-6      	; 0xb72 <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     b78:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     b7c:	e0 ea       	ldi	r30, 0xA0	; 160
     b7e:	f9 e0       	ldi	r31, 0x09	; 9
     b80:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     b82:	86 ff       	sbrs	r24, 6
     b84:	fd cf       	rjmp	.-6      	; 0xb80 <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     b86:	e0 ea       	ldi	r30, 0xA0	; 160
     b88:	f9 e0       	ldi	r31, 0x09	; 9
     b8a:	80 e4       	ldi	r24, 0x40	; 64
     b8c:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     b8e:	80 81       	ld	r24, Z
     b90:	be 01       	movw	r22, r28
     b92:	6f 5f       	subi	r22, 0xFF	; 255
     b94:	7f 4f       	sbci	r23, 0xFF	; 255
     b96:	80 ea       	ldi	r24, 0xA0	; 160
     b98:	99 e0       	ldi	r25, 0x09	; 9
     b9a:	1b d3       	rcall	.+1590   	; 0x11d2 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     b9c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b9e:	89 83       	std	Y+1, r24	; 0x01
     ba0:	be 01       	movw	r22, r28
     ba2:	6f 5f       	subi	r22, 0xFF	; 255
     ba4:	7f 4f       	sbci	r23, 0xFF	; 255
     ba6:	80 ea       	ldi	r24, 0xA0	; 160
     ba8:	99 e0       	ldi	r25, 0x09	; 9
     baa:	fd d2       	rcall	.+1530   	; 0x11a6 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7be665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     bb2:	e0 ea       	ldi	r30, 0xA0	; 160
     bb4:	f9 e0       	ldi	r31, 0x09	; 9
     bb6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     bb8:	85 ff       	sbrs	r24, 5
     bba:	fd cf       	rjmp	.-6      	; 0xbb6 <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     bbc:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     bc0:	e0 ea       	ldi	r30, 0xA0	; 160
     bc2:	f9 e0       	ldi	r31, 0x09	; 9
     bc4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     bc6:	86 ff       	sbrs	r24, 6
     bc8:	fd cf       	rjmp	.-6      	; 0xbc4 <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     bca:	e0 ea       	ldi	r30, 0xA0	; 160
     bcc:	f9 e0       	ldi	r31, 0x09	; 9
     bce:	80 e4       	ldi	r24, 0x40	; 64
     bd0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     bd2:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     bda:	be 01       	movw	r22, r28
     bdc:	6f 5f       	subi	r22, 0xFF	; 255
     bde:	7f 4f       	sbci	r23, 0xFF	; 255
     be0:	80 ea       	ldi	r24, 0xA0	; 160
     be2:	99 e0       	ldi	r25, 0x09	; 9
     be4:	f6 d2       	rcall	.+1516   	; 0x11d2 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     be6:	0f 90       	pop	r0
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	ff 90       	pop	r15
     bf2:	08 95       	ret

00000bf4 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	1f 92       	push	r1
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     c02:	82 e7       	ldi	r24, 0x72	; 114
     c04:	90 e2       	ldi	r25, 0x20	; 32
     c06:	fb d2       	rcall	.+1526   	; 0x11fe <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     c08:	8a dd       	rcall	.-1260   	; 0x71e <st7565r_init>
     c0a:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     c0c:	89 83       	std	Y+1, r24	; 0x01
     c0e:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     c10:	6f 5f       	subi	r22, 0xFF	; 255
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	80 ea       	ldi	r24, 0xA0	; 160
     c16:	99 e0       	ldi	r25, 0x09	; 9
     c18:	c6 d2       	rcall	.+1420   	; 0x11a6 <usart_spi_select_device>
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
     c20:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     c22:	f9 e0       	ldi	r31, 0x09	; 9
     c24:	81 81       	ldd	r24, Z+1	; 0x01
     c26:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     c28:	fd cf       	rjmp	.-6      	; 0xc24 <gfx_mono_st7565r_init+0x30>
     c2a:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     c2c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
     c30:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     c32:	f9 e0       	ldi	r31, 0x09	; 9
     c34:	81 81       	ldd	r24, Z+1	; 0x01
     c36:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     c38:	fd cf       	rjmp	.-6      	; 0xc34 <gfx_mono_st7565r_init+0x40>
     c3a:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     c3c:	f9 e0       	ldi	r31, 0x09	; 9
     c3e:	80 e4       	ldi	r24, 0x40	; 64
     c40:	81 83       	std	Z+1, r24	; 0x01
     c42:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     c44:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     c46:	6f 5f       	subi	r22, 0xFF	; 255
     c48:	7f 4f       	sbci	r23, 0xFF	; 255
     c4a:	80 ea       	ldi	r24, 0xA0	; 160
     c4c:	99 e0       	ldi	r25, 0x09	; 9
     c4e:	c1 d2       	rcall	.+1410   	; 0x11d2 <usart_spi_deselect_device>
     c50:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     c52:	0a c0       	rjmp	.+20     	; 0xc68 <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	61 2f       	mov	r22, r17
     c58:	80 2f       	mov	r24, r16
     c5a:	25 df       	rcall	.-438    	; 0xaa6 <gfx_mono_st7565r_put_byte>
     c5c:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     c5e:	10 38       	cpi	r17, 0x80	; 128
     c60:	c9 f7       	brne	.-14     	; 0xc54 <gfx_mono_st7565r_init+0x60>
     c62:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     c64:	04 30       	cpi	r16, 0x04	; 4
     c66:	11 f0       	breq	.+4      	; 0xc6c <gfx_mono_st7565r_init+0x78>
     c68:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     c6a:	f4 cf       	rjmp	.-24     	; 0xc54 <gfx_mono_st7565r_init+0x60>
     c6c:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	08 95       	ret

00000c78 <gfx_mono_st7565r_draw_pixel>:
     c78:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     c82:	88 23       	and	r24, r24
     c84:	4c f1       	brlt	.+82     	; 0xcd8 <gfx_mono_st7565r_draw_pixel+0x60>
     c86:	60 32       	cpi	r22, 0x20	; 32
     c88:	38 f5       	brcc	.+78     	; 0xcd8 <gfx_mono_st7565r_draw_pixel+0x60>
     c8a:	d4 2f       	mov	r29, r20
     c8c:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     c8e:	f6 2e       	mov	r15, r22
     c90:	f6 94       	lsr	r15
     c92:	f6 94       	lsr	r15
     c94:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	88 e0       	ldi	r24, 0x08	; 8
     c9a:	f8 9e       	mul	r15, r24
     c9c:	60 19       	sub	r22, r0
     c9e:	71 09       	sbc	r23, r1
     ca0:	11 24       	eor	r1, r1
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	8c 01       	movw	r16, r24
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <gfx_mono_st7565r_draw_pixel+0x36>
     caa:	00 0f       	add	r16, r16
     cac:	11 1f       	adc	r17, r17
     cae:	6a 95       	dec	r22
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     cb2:	6c 2f       	mov	r22, r28
     cb4:	8f 2d       	mov	r24, r15
     cb6:	b6 d2       	rcall	.+1388   	; 0x1224 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     cb8:	d1 30       	cpi	r29, 0x01	; 1
     cba:	21 f0       	breq	.+8      	; 0xcc4 <gfx_mono_st7565r_draw_pixel+0x4c>
     cbc:	28 f0       	brcs	.+10     	; 0xcc8 <gfx_mono_st7565r_draw_pixel+0x50>
     cbe:	d2 30       	cpi	r29, 0x02	; 2
     cc0:	31 f0       	breq	.+12     	; 0xcce <gfx_mono_st7565r_draw_pixel+0x56>
     cc2:	06 c0       	rjmp	.+12     	; 0xcd0 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     cc4:	80 2b       	or	r24, r16
		break;
     cc6:	04 c0       	rjmp	.+8      	; 0xcd0 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     cc8:	00 95       	com	r16
     cca:	80 23       	and	r24, r16
		break;
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     cce:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     cd0:	48 2f       	mov	r20, r24
     cd2:	6c 2f       	mov	r22, r28
     cd4:	8f 2d       	mov	r24, r15
     cd6:	e7 de       	rcall	.-562    	; 0xaa6 <gfx_mono_st7565r_put_byte>
}
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	08 95       	ret

00000ce4 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     ce4:	9f c2       	rjmp	.+1342   	; 0x1224 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     ce6:	08 95       	ret

00000ce8 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     cfa:	d9 01       	movw	r26, r18
     cfc:	c8 01       	movw	r24, r16
     cfe:	b6 95       	lsr	r27
     d00:	a7 95       	ror	r26
     d02:	97 95       	ror	r25
     d04:	87 95       	ror	r24
     d06:	48 17       	cp	r20, r24
     d08:	59 07       	cpc	r21, r25
     d0a:	6a 07       	cpc	r22, r26
     d0c:	7b 07       	cpc	r23, r27
     d0e:	78 f4       	brcc	.+30     	; 0xd2e <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     d10:	6a 01       	movw	r12, r20
     d12:	7b 01       	movw	r14, r22
     d14:	cc 0c       	add	r12, r12
     d16:	dd 1c       	adc	r13, r13
     d18:	ee 1c       	adc	r14, r14
     d1a:	ff 1c       	adc	r15, r15
     d1c:	c9 01       	movw	r24, r18
     d1e:	b8 01       	movw	r22, r16
     d20:	a7 01       	movw	r20, r14
     d22:	96 01       	movw	r18, r12
     d24:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__udivmodsi4>
     d28:	21 50       	subi	r18, 0x01	; 1
     d2a:	31 09       	sbc	r19, r1
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     d32:	83 2f       	mov	r24, r19
     d34:	8f 70       	andi	r24, 0x0F	; 15
     d36:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     d38:	2e 83       	std	Y+6, r18	; 0x06
}
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	ff 90       	pop	r15
     d44:	ef 90       	pop	r14
     d46:	df 90       	pop	r13
     d48:	cf 90       	pop	r12
     d4a:	08 95       	ret

00000d4c <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     d4c:	df 92       	push	r13
     d4e:	ef 92       	push	r14
     d50:	ff 92       	push	r15
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	1f 92       	push	r1
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	7c 01       	movw	r14, r24
     d62:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	09 f4       	brne	.+2      	; 0xd6a <usart_init_spi+0x1e>
     d68:	b2 c1       	rjmp	.+868    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     d6a:	80 3c       	cpi	r24, 0xC0	; 192
     d6c:	91 05       	cpc	r25, r1
     d6e:	21 f4       	brne	.+8      	; 0xd78 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     d70:	60 e1       	ldi	r22, 0x10	; 16
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	b4 d6       	rcall	.+3432   	; 0x1ade <sysclk_enable_module>
     d76:	ab c1       	rjmp	.+854    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     d78:	80 e8       	ldi	r24, 0x80	; 128
     d7a:	e8 16       	cp	r14, r24
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	f8 06       	cpc	r15, r24
     d80:	21 f4       	brne	.+8      	; 0xd8a <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     d82:	62 e0       	ldi	r22, 0x02	; 2
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	ab d6       	rcall	.+3414   	; 0x1ade <sysclk_enable_module>
     d88:	a2 c1       	rjmp	.+836    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     d8a:	e1 14       	cp	r14, r1
     d8c:	e1 e0       	ldi	r30, 0x01	; 1
     d8e:	fe 06       	cpc	r15, r30
     d90:	21 f4       	brne	.+8      	; 0xd9a <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     d92:	61 e0       	ldi	r22, 0x01	; 1
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	a3 d6       	rcall	.+3398   	; 0x1ade <sysclk_enable_module>
     d98:	9a c1       	rjmp	.+820    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     d9a:	f0 e8       	ldi	r31, 0x80	; 128
     d9c:	ef 16       	cp	r14, r31
     d9e:	f3 e0       	ldi	r31, 0x03	; 3
     da0:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     da2:	21 f4       	brne	.+8      	; 0xdac <usart_init_spi+0x60>
     da4:	61 e0       	ldi	r22, 0x01	; 1
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	9a d6       	rcall	.+3380   	; 0x1ade <sysclk_enable_module>
     daa:	91 c1       	rjmp	.+802    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     dac:	30 e9       	ldi	r19, 0x90	; 144
     dae:	e3 16       	cp	r14, r19
     db0:	33 e0       	ldi	r19, 0x03	; 3
     db2:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     db4:	21 f4       	brne	.+8      	; 0xdbe <usart_init_spi+0x72>
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	91 d6       	rcall	.+3362   	; 0x1ade <sysclk_enable_module>
     dbc:	88 c1       	rjmp	.+784    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     dbe:	e1 14       	cp	r14, r1
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     dc4:	21 f4       	brne	.+8      	; 0xdce <usart_init_spi+0x82>
     dc6:	62 e0       	ldi	r22, 0x02	; 2
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	89 d6       	rcall	.+3346   	; 0x1ade <sysclk_enable_module>
     dcc:	80 c1       	rjmp	.+768    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     dce:	e0 e4       	ldi	r30, 0x40	; 64
     dd0:	ee 16       	cp	r14, r30
     dd2:	e2 e0       	ldi	r30, 0x02	; 2
     dd4:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     dd6:	21 f4       	brne	.+8      	; 0xde0 <usart_init_spi+0x94>
     dd8:	62 e0       	ldi	r22, 0x02	; 2
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	80 d6       	rcall	.+3328   	; 0x1ade <sysclk_enable_module>
     dde:	77 c1       	rjmp	.+750    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     de0:	f0 e2       	ldi	r31, 0x20	; 32
     de2:	ef 16       	cp	r14, r31
     de4:	f3 e0       	ldi	r31, 0x03	; 3
     de6:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     de8:	21 f4       	brne	.+8      	; 0xdf2 <usart_init_spi+0xa6>
     dea:	64 e0       	ldi	r22, 0x04	; 4
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	77 d6       	rcall	.+3310   	; 0x1ade <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     df0:	6e c1       	rjmp	.+732    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     df2:	e1 14       	cp	r14, r1
     df4:	38 e0       	ldi	r19, 0x08	; 8
     df6:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     df8:	21 f4       	brne	.+8      	; 0xe02 <usart_init_spi+0xb6>
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	6f d6       	rcall	.+3294   	; 0x1ade <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     e00:	66 c1       	rjmp	.+716    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     e02:	e1 14       	cp	r14, r1
     e04:	89 e0       	ldi	r24, 0x09	; 9
     e06:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     e08:	21 f4       	brne	.+8      	; 0xe12 <usart_init_spi+0xc6>
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	84 e0       	ldi	r24, 0x04	; 4
     e0e:	67 d6       	rcall	.+3278   	; 0x1ade <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     e10:	5e c1       	rjmp	.+700    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     e12:	e1 14       	cp	r14, r1
     e14:	ea e0       	ldi	r30, 0x0A	; 10
     e16:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     e18:	21 f4       	brne	.+8      	; 0xe22 <usart_init_spi+0xd6>
     e1a:	61 e0       	ldi	r22, 0x01	; 1
     e1c:	85 e0       	ldi	r24, 0x05	; 5
     e1e:	5f d6       	rcall	.+3262   	; 0x1ade <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     e20:	56 c1       	rjmp	.+684    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     e22:	e1 14       	cp	r14, r1
     e24:	fb e0       	ldi	r31, 0x0B	; 11
     e26:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     e28:	21 f4       	brne	.+8      	; 0xe32 <usart_init_spi+0xe6>
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	86 e0       	ldi	r24, 0x06	; 6
     e2e:	57 d6       	rcall	.+3246   	; 0x1ade <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     e30:	4e c1       	rjmp	.+668    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     e32:	30 e4       	ldi	r19, 0x40	; 64
     e34:	e3 16       	cp	r14, r19
     e36:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     e38:	f3 06       	cpc	r15, r19
     e3a:	21 f4       	brne	.+8      	; 0xe44 <usart_init_spi+0xf8>
     e3c:	62 e0       	ldi	r22, 0x02	; 2
     e3e:	83 e0       	ldi	r24, 0x03	; 3
     e40:	4e d6       	rcall	.+3228   	; 0x1ade <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     e42:	45 c1       	rjmp	.+650    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     e44:	80 e4       	ldi	r24, 0x40	; 64
     e46:	e8 16       	cp	r14, r24
     e48:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     e4a:	f8 06       	cpc	r15, r24
     e4c:	21 f4       	brne	.+8      	; 0xe56 <usart_init_spi+0x10a>
     e4e:	62 e0       	ldi	r22, 0x02	; 2
     e50:	84 e0       	ldi	r24, 0x04	; 4
     e52:	45 d6       	rcall	.+3210   	; 0x1ade <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     e54:	3c c1       	rjmp	.+632    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     e56:	e0 e4       	ldi	r30, 0x40	; 64
     e58:	ee 16       	cp	r14, r30
     e5a:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     e5c:	fe 06       	cpc	r15, r30
     e5e:	21 f4       	brne	.+8      	; 0xe68 <usart_init_spi+0x11c>
     e60:	62 e0       	ldi	r22, 0x02	; 2
     e62:	85 e0       	ldi	r24, 0x05	; 5
     e64:	3c d6       	rcall	.+3192   	; 0x1ade <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     e66:	33 c1       	rjmp	.+614    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     e68:	f0 e9       	ldi	r31, 0x90	; 144
     e6a:	ef 16       	cp	r14, r31
     e6c:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     e6e:	ff 06       	cpc	r15, r31
     e70:	21 f4       	brne	.+8      	; 0xe7a <usart_init_spi+0x12e>
     e72:	64 e0       	ldi	r22, 0x04	; 4
     e74:	83 e0       	ldi	r24, 0x03	; 3
     e76:	33 d6       	rcall	.+3174   	; 0x1ade <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     e78:	2a c1       	rjmp	.+596    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     e7a:	30 e9       	ldi	r19, 0x90	; 144
     e7c:	e3 16       	cp	r14, r19
     e7e:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     e80:	f3 06       	cpc	r15, r19
     e82:	21 f4       	brne	.+8      	; 0xe8c <usart_init_spi+0x140>
     e84:	64 e0       	ldi	r22, 0x04	; 4
     e86:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     e88:	2a d6       	rcall	.+3156   	; 0x1ade <sysclk_enable_module>
     e8a:	21 c1       	rjmp	.+578    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     e8c:	80 e9       	ldi	r24, 0x90	; 144
     e8e:	e8 16       	cp	r14, r24
     e90:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     e92:	f8 06       	cpc	r15, r24
     e94:	21 f4       	brne	.+8      	; 0xe9e <usart_init_spi+0x152>
     e96:	64 e0       	ldi	r22, 0x04	; 4
     e98:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     e9a:	21 d6       	rcall	.+3138   	; 0x1ade <sysclk_enable_module>
     e9c:	18 c1       	rjmp	.+560    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     e9e:	e0 e9       	ldi	r30, 0x90	; 144
     ea0:	ee 16       	cp	r14, r30
     ea2:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     ea4:	fe 06       	cpc	r15, r30
     ea6:	21 f4       	brne	.+8      	; 0xeb0 <usart_init_spi+0x164>
     ea8:	64 e0       	ldi	r22, 0x04	; 4
     eaa:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     eac:	18 d6       	rcall	.+3120   	; 0x1ade <sysclk_enable_module>
     eae:	0f c1       	rjmp	.+542    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     eb0:	f0 ec       	ldi	r31, 0xC0	; 192
     eb2:	ef 16       	cp	r14, r31
     eb4:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     eb6:	ff 06       	cpc	r15, r31
     eb8:	21 f4       	brne	.+8      	; 0xec2 <usart_init_spi+0x176>
     eba:	68 e0       	ldi	r22, 0x08	; 8
     ebc:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     ebe:	0f d6       	rcall	.+3102   	; 0x1ade <sysclk_enable_module>
     ec0:	06 c1       	rjmp	.+524    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     ec2:	30 ec       	ldi	r19, 0xC0	; 192
     ec4:	e3 16       	cp	r14, r19
     ec6:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     ec8:	f3 06       	cpc	r15, r19
     eca:	21 f4       	brne	.+8      	; 0xed4 <usart_init_spi+0x188>
     ecc:	68 e0       	ldi	r22, 0x08	; 8
     ece:	84 e0       	ldi	r24, 0x04	; 4
     ed0:	06 d6       	rcall	.+3084   	; 0x1ade <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     ed2:	fd c0       	rjmp	.+506    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     ed4:	80 ea       	ldi	r24, 0xA0	; 160
     ed6:	e8 16       	cp	r14, r24
     ed8:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     eda:	f8 06       	cpc	r15, r24
     edc:	61 f4       	brne	.+24     	; 0xef6 <usart_init_spi+0x1aa>
     ede:	60 e1       	ldi	r22, 0x10	; 16
     ee0:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     ee2:	fd d5       	rcall	.+3066   	; 0x1ade <sysclk_enable_module>
     ee4:	e0 ea       	ldi	r30, 0xA0	; 160
     ee6:	f8 e0       	ldi	r31, 0x08	; 8
     ee8:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     eea:	8f 7e       	andi	r24, 0xEF	; 239
     eec:	84 83       	std	Z+4, r24	; 0x04
     eee:	f8 01       	movw	r30, r16
     ef0:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     ef2:	22 50       	subi	r18, 0x02	; 2
     ef4:	4c c0       	rjmp	.+152    	; 0xf8e <usart_init_spi+0x242>
     ef6:	f0 ea       	ldi	r31, 0xA0	; 160
     ef8:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     efa:	f9 e0       	ldi	r31, 0x09	; 9
     efc:	ff 06       	cpc	r15, r31
     efe:	21 f4       	brne	.+8      	; 0xf08 <usart_init_spi+0x1bc>
     f00:	60 e1       	ldi	r22, 0x10	; 16
     f02:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     f04:	ec d5       	rcall	.+3032   	; 0x1ade <sysclk_enable_module>
     f06:	e3 c0       	rjmp	.+454    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     f08:	30 ea       	ldi	r19, 0xA0	; 160
     f0a:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     f0c:	3a e0       	ldi	r19, 0x0A	; 10
     f0e:	f3 06       	cpc	r15, r19
     f10:	21 f4       	brne	.+8      	; 0xf1a <usart_init_spi+0x1ce>
     f12:	60 e1       	ldi	r22, 0x10	; 16
     f14:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     f16:	e3 d5       	rcall	.+3014   	; 0x1ade <sysclk_enable_module>
     f18:	da c0       	rjmp	.+436    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     f1a:	80 ea       	ldi	r24, 0xA0	; 160
     f1c:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     f1e:	8b e0       	ldi	r24, 0x0B	; 11
     f20:	f8 06       	cpc	r15, r24
     f22:	21 f4       	brne	.+8      	; 0xf2c <usart_init_spi+0x1e0>
     f24:	60 e1       	ldi	r22, 0x10	; 16
     f26:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     f28:	da d5       	rcall	.+2996   	; 0x1ade <sysclk_enable_module>
     f2a:	d1 c0       	rjmp	.+418    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     f2c:	e0 eb       	ldi	r30, 0xB0	; 176
     f2e:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     f30:	e8 e0       	ldi	r30, 0x08	; 8
     f32:	fe 06       	cpc	r15, r30
     f34:	21 f4       	brne	.+8      	; 0xf3e <usart_init_spi+0x1f2>
     f36:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	d1 d5       	rcall	.+2978   	; 0x1ade <sysclk_enable_module>
     f3c:	c8 c0       	rjmp	.+400    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     f3e:	f0 eb       	ldi	r31, 0xB0	; 176
     f40:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     f42:	f9 e0       	ldi	r31, 0x09	; 9
     f44:	ff 06       	cpc	r15, r31
     f46:	21 f4       	brne	.+8      	; 0xf50 <usart_init_spi+0x204>
     f48:	60 e2       	ldi	r22, 0x20	; 32
     f4a:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     f4c:	c8 d5       	rcall	.+2960   	; 0x1ade <sysclk_enable_module>
     f4e:	bf c0       	rjmp	.+382    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     f50:	30 e8       	ldi	r19, 0x80	; 128
     f52:	e3 16       	cp	r14, r19
     f54:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     f56:	f3 06       	cpc	r15, r19
     f58:	21 f4       	brne	.+8      	; 0xf62 <usart_init_spi+0x216>
     f5a:	60 e4       	ldi	r22, 0x40	; 64
     f5c:	83 e0       	ldi	r24, 0x03	; 3
     f5e:	bf d5       	rcall	.+2942   	; 0x1ade <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     f60:	b6 c0       	rjmp	.+364    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     f62:	80 ea       	ldi	r24, 0xA0	; 160
     f64:	e8 16       	cp	r14, r24
     f66:	84 e0       	ldi	r24, 0x04	; 4
     f68:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     f6a:	21 f4       	brne	.+8      	; 0xf74 <usart_init_spi+0x228>
     f6c:	60 e4       	ldi	r22, 0x40	; 64
     f6e:	85 e0       	ldi	r24, 0x05	; 5
     f70:	b6 d5       	rcall	.+2924   	; 0x1ade <sysclk_enable_module>
     f72:	ad c0       	rjmp	.+346    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     f74:	f7 01       	movw	r30, r14
     f76:	84 81       	ldd	r24, Z+4	; 0x04
     f78:	8f 7e       	andi	r24, 0xEF	; 239
     f7a:	84 83       	std	Z+4, r24	; 0x04
     f7c:	fb 01       	movw	r30, r22
     f7e:	24 81       	ldd	r18, Z+4	; 0x04
     f80:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     f82:	c7 01       	movw	r24, r14
     f84:	f0 ea       	ldi	r31, 0xA0	; 160
     f86:	ef 16       	cp	r14, r31
     f88:	f8 e0       	ldi	r31, 0x08	; 8
     f8a:	ff 06       	cpc	r15, r31
     f8c:	49 f4       	brne	.+18     	; 0xfa0 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
     f8e:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x7be64e>
     f92:	84 fd       	sbrc	r24, 4
     f94:	a5 c0       	rjmp	.+330    	; 0x10e0 <__EEPROM_REGION_LENGTH__+0xe0>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
     f96:	0f 2e       	mov	r0, r31
     f98:	f1 e1       	ldi	r31, 0x11	; 17
     f9a:	df 2e       	mov	r13, r31
     f9c:	f0 2d       	mov	r31, r0
     f9e:	a4 c0       	rjmp	.+328    	; 0x10e8 <__EEPROM_REGION_LENGTH__+0xe8>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
     fa0:	80 3b       	cpi	r24, 0xB0	; 176
     fa2:	38 e0       	ldi	r19, 0x08	; 8
     fa4:	93 07       	cpc	r25, r19
     fa6:	91 f0       	breq	.+36     	; 0xfcc <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
     fa8:	80 3a       	cpi	r24, 0xA0	; 160
     faa:	e9 e0       	ldi	r30, 0x09	; 9
     fac:	9e 07       	cpc	r25, r30
     fae:	49 f4       	brne	.+18     	; 0xfc2 <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
     fb0:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x7be66e>
     fb4:	34 fd       	sbrc	r19, 4
     fb6:	9b c0       	rjmp	.+310    	; 0x10ee <__EEPROM_REGION_LENGTH__+0xee>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
     fb8:	0f 2e       	mov	r0, r31
     fba:	f9 e1       	ldi	r31, 0x19	; 25
     fbc:	df 2e       	mov	r13, r31
     fbe:	f0 2d       	mov	r31, r0
     fc0:	16 c0       	rjmp	.+44     	; 0xfee <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
     fc2:	80 3b       	cpi	r24, 0xB0	; 176
     fc4:	f9 e0       	ldi	r31, 0x09	; 9
     fc6:	9f 07       	cpc	r25, r31
     fc8:	f1 f0       	breq	.+60     	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
     fca:	04 c0       	rjmp	.+8      	; 0xfd4 <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
     fcc:	0f 2e       	mov	r0, r31
     fce:	f5 e1       	ldi	r31, 0x15	; 21
     fd0:	df 2e       	mov	r13, r31
     fd2:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
     fd4:	80 3a       	cpi	r24, 0xA0	; 160
     fd6:	3a e0       	ldi	r19, 0x0A	; 10
     fd8:	93 07       	cpc	r25, r19
     fda:	49 f4       	brne	.+18     	; 0xfee <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
     fdc:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x7be68e>
     fe0:	84 fd       	sbrc	r24, 4
     fe2:	8a c0       	rjmp	.+276    	; 0x10f8 <__EEPROM_REGION_LENGTH__+0xf8>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
     fe4:	0f 2e       	mov	r0, r31
     fe6:	f1 e2       	ldi	r31, 0x21	; 33
     fe8:	df 2e       	mov	r13, r31
     fea:	f0 2d       	mov	r31, r0
     fec:	15 c0       	rjmp	.+42     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
     fee:	80 3a       	cpi	r24, 0xA0	; 160
     ff0:	9b 40       	sbci	r25, 0x0B	; 11
     ff2:	91 f4       	brne	.+36     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
     ff4:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7be6ae>
     ff8:	84 fd       	sbrc	r24, 4
     ffa:	0a c0       	rjmp	.+20     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
     ffc:	0f 2e       	mov	r0, r31
     ffe:	f9 e2       	ldi	r31, 0x29	; 41
    1000:	df 2e       	mov	r13, r31
    1002:	f0 2d       	mov	r31, r0
    1004:	09 c0       	rjmp	.+18     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1006:	0f 2e       	mov	r0, r31
    1008:	fd e1       	ldi	r31, 0x1D	; 29
    100a:	df 2e       	mov	r13, r31
    100c:	f0 2d       	mov	r31, r0
    100e:	04 c0       	rjmp	.+8      	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    1010:	0f 2e       	mov	r0, r31
    1012:	fd e2       	ldi	r31, 0x2D	; 45
    1014:	df 2e       	mov	r13, r31
    1016:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1018:	ed 2d       	mov	r30, r13
    101a:	e6 95       	lsr	r30
    101c:	e6 95       	lsr	r30
    101e:	e6 95       	lsr	r30
    1020:	30 e2       	ldi	r19, 0x20	; 32
    1022:	e3 9f       	mul	r30, r19
    1024:	f0 01       	movw	r30, r0
    1026:	11 24       	eor	r1, r1
    1028:	fa 5f       	subi	r31, 0xFA	; 250
    102a:	3d 2d       	mov	r19, r13
    102c:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	03 2e       	mov	r0, r19
    1034:	02 c0       	rjmp	.+4      	; 0x103a <__EEPROM_REGION_LENGTH__+0x3a>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    103e:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    1040:	22 30       	cpi	r18, 0x02	; 2
    1042:	10 f0       	brcs	.+4      	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	01 c0       	rjmp	.+2      	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
    1048:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    104a:	df 01       	movw	r26, r30
    104c:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    104e:	a3 0f       	add	r26, r19
    1050:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1052:	9f b7       	in	r25, 0x3f	; 63
    1054:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1056:	f8 94       	cli
	return flags;
    1058:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    105a:	2c 91       	ld	r18, X
    105c:	27 70       	andi	r18, 0x07	; 7
    105e:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    1060:	9c 91       	ld	r25, X
    1062:	94 2b       	or	r25, r20
    1064:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1066:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1068:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    106a:	f7 01       	movw	r30, r14
    106c:	85 81       	ldd	r24, Z+5	; 0x05
    106e:	80 6c       	ori	r24, 0xC0	; 192
    1070:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    1072:	f8 01       	movw	r30, r16
    1074:	84 81       	ldd	r24, Z+4	; 0x04
    1076:	8d 7f       	andi	r24, 0xFD	; 253
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	29 f4       	brne	.+10     	; 0x1086 <__EEPROM_REGION_LENGTH__+0x86>
		usart->CTRLC |= USART_UCPHA_bm;
    107c:	f7 01       	movw	r30, r14
    107e:	85 81       	ldd	r24, Z+5	; 0x05
    1080:	82 60       	ori	r24, 0x02	; 2
    1082:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1084:	04 c0       	rjmp	.+8      	; 0x108e <__EEPROM_REGION_LENGTH__+0x8e>
    1086:	f7 01       	movw	r30, r14
    1088:	85 81       	ldd	r24, Z+5	; 0x05
    108a:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
    108c:	85 83       	std	Z+5, r24	; 0x05
    108e:	f8 01       	movw	r30, r16
    1090:	85 81       	ldd	r24, Z+5	; 0x05
    1092:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
    1094:	29 f0       	breq	.+10     	; 0x10a0 <__EEPROM_REGION_LENGTH__+0xa0>
    1096:	f7 01       	movw	r30, r14
    1098:	85 81       	ldd	r24, Z+5	; 0x05
    109a:	84 60       	ori	r24, 0x04	; 4
    109c:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__EEPROM_REGION_LENGTH__+0xa8>
    10a0:	f7 01       	movw	r30, r14
    10a2:	85 81       	ldd	r24, Z+5	; 0x05
    10a4:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    10a6:	85 83       	std	Z+5, r24	; 0x05
    10a8:	f8 01       	movw	r30, r16
    10aa:	40 81       	ld	r20, Z
    10ac:	51 81       	ldd	r21, Z+1	; 0x01
    10ae:	62 81       	ldd	r22, Z+2	; 0x02
    10b0:	73 81       	ldd	r23, Z+3	; 0x03
    10b2:	00 e8       	ldi	r16, 0x80	; 128
    10b4:	14 e8       	ldi	r17, 0x84	; 132
    10b6:	2e e1       	ldi	r18, 0x1E	; 30
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	c7 01       	movw	r24, r14
    10bc:	15 de       	rcall	.-982    	; 0xce8 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    10be:	f7 01       	movw	r30, r14
    10c0:	84 81       	ldd	r24, Z+4	; 0x04
    10c2:	88 60       	ori	r24, 0x08	; 8
    10c4:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    10c6:	84 81       	ldd	r24, Z+4	; 0x04
    10c8:	80 61       	ori	r24, 0x10	; 16
    10ca:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    10cc:	1a c0       	rjmp	.+52     	; 0x1102 <__EEPROM_REGION_LENGTH__+0x102>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    10ce:	f7 01       	movw	r30, r14
    10d0:	84 81       	ldd	r24, Z+4	; 0x04
    10d2:	8f 7e       	andi	r24, 0xEF	; 239
    10d4:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    10d6:	f8 01       	movw	r30, r16
    10d8:	24 81       	ldd	r18, Z+4	; 0x04
    10da:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    10dc:	c7 01       	movw	r24, r14
    10de:	60 cf       	rjmp	.-320    	; 0xfa0 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    10e0:	0f 2e       	mov	r0, r31
    10e2:	f5 e1       	ldi	r31, 0x15	; 21
    10e4:	df 2e       	mov	r13, r31
    10e6:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    10e8:	80 ea       	ldi	r24, 0xA0	; 160
    10ea:	98 e0       	ldi	r25, 0x08	; 8
    10ec:	6a cf       	rjmp	.-300    	; 0xfc2 <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    10ee:	0f 2e       	mov	r0, r31
    10f0:	fd e1       	ldi	r31, 0x1D	; 29
    10f2:	df 2e       	mov	r13, r31
    10f4:	f0 2d       	mov	r31, r0
    10f6:	7b cf       	rjmp	.-266    	; 0xfee <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    10f8:	0f 2e       	mov	r0, r31
    10fa:	f5 e2       	ldi	r31, 0x25	; 37
    10fc:	df 2e       	mov	r13, r31
    10fe:	f0 2d       	mov	r31, r0
    1100:	8b cf       	rjmp	.-234    	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1102:	0f 90       	pop	r0
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	df 90       	pop	r13
    1112:	08 95       	ret

00001114 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    1114:	80 3a       	cpi	r24, 0xA0	; 160
    1116:	28 e0       	ldi	r18, 0x08	; 8
    1118:	92 07       	cpc	r25, r18
    111a:	21 f4       	brne	.+8      	; 0x1124 <usart_spi_init+0x10>
    111c:	60 e1       	ldi	r22, 0x10	; 16
    111e:	83 e0       	ldi	r24, 0x03	; 3
    1120:	de c4       	rjmp	.+2492   	; 0x1ade <sysclk_enable_module>
    1122:	08 95       	ret
    1124:	80 3b       	cpi	r24, 0xB0	; 176
    1126:	28 e0       	ldi	r18, 0x08	; 8
    1128:	92 07       	cpc	r25, r18
    112a:	21 f4       	brne	.+8      	; 0x1134 <usart_spi_init+0x20>
    112c:	60 e2       	ldi	r22, 0x20	; 32
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	d6 c4       	rjmp	.+2476   	; 0x1ade <sysclk_enable_module>
    1132:	08 95       	ret
    1134:	80 3a       	cpi	r24, 0xA0	; 160
    1136:	29 e0       	ldi	r18, 0x09	; 9
    1138:	92 07       	cpc	r25, r18
    113a:	21 f4       	brne	.+8      	; 0x1144 <usart_spi_init+0x30>
    113c:	60 e1       	ldi	r22, 0x10	; 16
    113e:	84 e0       	ldi	r24, 0x04	; 4
    1140:	ce c4       	rjmp	.+2460   	; 0x1ade <sysclk_enable_module>
    1142:	08 95       	ret
    1144:	80 3b       	cpi	r24, 0xB0	; 176
    1146:	29 e0       	ldi	r18, 0x09	; 9
    1148:	92 07       	cpc	r25, r18
    114a:	21 f4       	brne	.+8      	; 0x1154 <usart_spi_init+0x40>
    114c:	60 e2       	ldi	r22, 0x20	; 32
    114e:	84 e0       	ldi	r24, 0x04	; 4
    1150:	c6 c4       	rjmp	.+2444   	; 0x1ade <sysclk_enable_module>
    1152:	08 95       	ret
    1154:	80 3a       	cpi	r24, 0xA0	; 160
    1156:	2a e0       	ldi	r18, 0x0A	; 10
    1158:	92 07       	cpc	r25, r18
    115a:	21 f4       	brne	.+8      	; 0x1164 <usart_spi_init+0x50>
    115c:	60 e1       	ldi	r22, 0x10	; 16
    115e:	85 e0       	ldi	r24, 0x05	; 5
    1160:	be c4       	rjmp	.+2428   	; 0x1ade <sysclk_enable_module>
    1162:	08 95       	ret
    1164:	80 3a       	cpi	r24, 0xA0	; 160
    1166:	9b 40       	sbci	r25, 0x0B	; 11
    1168:	19 f4       	brne	.+6      	; 0x1170 <usart_spi_init+0x5c>
    116a:	60 e1       	ldi	r22, 0x10	; 16
    116c:	86 e0       	ldi	r24, 0x06	; 6
    116e:	b7 c4       	rjmp	.+2414   	; 0x1ade <sysclk_enable_module>
    1170:	08 95       	ret

00001172 <usart_spi_setup_device>:
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	00 d0       	rcall	.+0      	; 0x117c <usart_spi_setup_device+0xa>
    117c:	00 d0       	rcall	.+0      	; 0x117e <usart_spi_setup_device+0xc>
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	09 83       	std	Y+1, r16	; 0x01
    1184:	1a 83       	std	Y+2, r17	; 0x02
    1186:	2b 83       	std	Y+3, r18	; 0x03
    1188:	3c 83       	std	Y+4, r19	; 0x04
    118a:	4d 83       	std	Y+5, r20	; 0x05
    118c:	1e 82       	std	Y+6, r1	; 0x06
    118e:	be 01       	movw	r22, r28
    1190:	6f 5f       	subi	r22, 0xFF	; 255
    1192:	7f 4f       	sbci	r23, 0xFF	; 255
    1194:	db dd       	rcall	.-1098   	; 0xd4c <usart_init_spi>
    1196:	26 96       	adiw	r28, 0x06	; 6
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	08 95       	ret

000011a6 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    11a6:	fb 01       	movw	r30, r22
    11a8:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    11aa:	e8 2f       	mov	r30, r24
    11ac:	e6 95       	lsr	r30
    11ae:	e6 95       	lsr	r30
    11b0:	e6 95       	lsr	r30
    11b2:	40 e2       	ldi	r20, 0x20	; 32
    11b4:	e4 9f       	mul	r30, r20
    11b6:	f0 01       	movw	r30, r0
    11b8:	11 24       	eor	r1, r1
    11ba:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    11bc:	87 70       	andi	r24, 0x07	; 7
    11be:	21 e0       	ldi	r18, 0x01	; 1
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	a9 01       	movw	r20, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <usart_spi_select_device+0x24>
    11c6:	44 0f       	add	r20, r20
    11c8:	55 1f       	adc	r21, r21
    11ca:	8a 95       	dec	r24
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    11ce:	46 83       	std	Z+6, r20	; 0x06
    11d0:	08 95       	ret

000011d2 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    11d2:	fb 01       	movw	r30, r22
    11d4:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    11d6:	e8 2f       	mov	r30, r24
    11d8:	e6 95       	lsr	r30
    11da:	e6 95       	lsr	r30
    11dc:	e6 95       	lsr	r30
    11de:	40 e2       	ldi	r20, 0x20	; 32
    11e0:	e4 9f       	mul	r30, r20
    11e2:	f0 01       	movw	r30, r0
    11e4:	11 24       	eor	r1, r1
    11e6:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    11e8:	87 70       	andi	r24, 0x07	; 7
    11ea:	21 e0       	ldi	r18, 0x01	; 1
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	a9 01       	movw	r20, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <usart_spi_deselect_device+0x24>
    11f2:	44 0f       	add	r20, r20
    11f4:	55 1f       	adc	r21, r21
    11f6:	8a 95       	dec	r24
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    11fa:	45 83       	std	Z+5, r20	; 0x05
    11fc:	08 95       	ret

000011fe <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    11fe:	80 93 72 22 	sts	0x2272, r24	; 0x802272 <fbpointer>
    1202:	90 93 73 22 	sts	0x2273, r25	; 0x802273 <fbpointer+0x1>
    1206:	08 95       	ret

00001208 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    1208:	20 91 72 22 	lds	r18, 0x2272	; 0x802272 <fbpointer>
    120c:	30 91 73 22 	lds	r19, 0x2273	; 0x802273 <fbpointer+0x1>
    1210:	90 e8       	ldi	r25, 0x80	; 128
    1212:	89 9f       	mul	r24, r25
    1214:	20 0d       	add	r18, r0
    1216:	31 1d       	adc	r19, r1
    1218:	11 24       	eor	r1, r1
    121a:	f9 01       	movw	r30, r18
    121c:	e6 0f       	add	r30, r22
    121e:	f1 1d       	adc	r31, r1
    1220:	40 83       	st	Z, r20
    1222:	08 95       	ret

00001224 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    1224:	20 91 72 22 	lds	r18, 0x2272	; 0x802272 <fbpointer>
    1228:	30 91 73 22 	lds	r19, 0x2273	; 0x802273 <fbpointer+0x1>
    122c:	90 e8       	ldi	r25, 0x80	; 128
    122e:	89 9f       	mul	r24, r25
    1230:	20 0d       	add	r18, r0
    1232:	31 1d       	adc	r19, r1
    1234:	11 24       	eor	r1, r1
    1236:	f9 01       	movw	r30, r18
    1238:	e6 0f       	add	r30, r22
    123a:	f1 1d       	adc	r31, r1
}
    123c:	80 81       	ld	r24, Z
    123e:	08 95       	ret

00001240 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    1240:	ff 92       	push	r15
    1242:	0f 93       	push	r16
    1244:	1f 93       	push	r17
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	e4 2f       	mov	r30, r20
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	e8 0f       	add	r30, r24
    1250:	f1 1d       	adc	r31, r1
    1252:	e1 38       	cpi	r30, 0x81	; 129
    1254:	f1 05       	cpc	r31, r1
    1256:	1c f0       	brlt	.+6      	; 0x125e <gfx_mono_generic_draw_horizontal_line+0x1e>
    1258:	c0 e8       	ldi	r28, 0x80	; 128
    125a:	4c 2f       	mov	r20, r28
    125c:	48 1b       	sub	r20, r24
    125e:	44 23       	and	r20, r20
    1260:	09 f4       	brne	.+2      	; 0x1264 <gfx_mono_generic_draw_horizontal_line+0x24>
    1262:	4a c0       	rjmp	.+148    	; 0x12f8 <gfx_mono_generic_draw_horizontal_line+0xb8>
    1264:	d6 2f       	mov	r29, r22
    1266:	d6 95       	lsr	r29
    1268:	d6 95       	lsr	r29
    126a:	d6 95       	lsr	r29
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	98 e0       	ldi	r25, 0x08	; 8
    1270:	d9 9f       	mul	r29, r25
    1272:	60 19       	sub	r22, r0
    1274:	71 09       	sbc	r23, r1
    1276:	11 24       	eor	r1, r1
    1278:	e1 e0       	ldi	r30, 0x01	; 1
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	df 01       	movw	r26, r30
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <gfx_mono_generic_draw_horizontal_line+0x44>
    1280:	aa 0f       	add	r26, r26
    1282:	bb 1f       	adc	r27, r27
    1284:	6a 95       	dec	r22
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <gfx_mono_generic_draw_horizontal_line+0x40>
    1288:	fa 2e       	mov	r15, r26
    128a:	21 30       	cpi	r18, 0x01	; 1
    128c:	21 f0       	breq	.+8      	; 0x1296 <gfx_mono_generic_draw_horizontal_line+0x56>
    128e:	98 f0       	brcs	.+38     	; 0x12b6 <gfx_mono_generic_draw_horizontal_line+0x76>
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	19 f1       	breq	.+70     	; 0x12da <gfx_mono_generic_draw_horizontal_line+0x9a>
    1294:	31 c0       	rjmp	.+98     	; 0x12f8 <gfx_mono_generic_draw_horizontal_line+0xb8>
    1296:	c4 2f       	mov	r28, r20
    1298:	1f ef       	ldi	r17, 0xFF	; 255
    129a:	18 0f       	add	r17, r24
    129c:	01 2f       	mov	r16, r17
    129e:	0c 0f       	add	r16, r28
    12a0:	60 2f       	mov	r22, r16
    12a2:	8d 2f       	mov	r24, r29
    12a4:	1f dd       	rcall	.-1474   	; 0xce4 <gfx_mono_st7565r_get_byte>
    12a6:	4f 2d       	mov	r20, r15
    12a8:	48 2b       	or	r20, r24
    12aa:	60 2f       	mov	r22, r16
    12ac:	8d 2f       	mov	r24, r29
    12ae:	fb db       	rcall	.-2058   	; 0xaa6 <gfx_mono_st7565r_put_byte>
    12b0:	c1 50       	subi	r28, 0x01	; 1
    12b2:	a1 f7       	brne	.-24     	; 0x129c <gfx_mono_generic_draw_horizontal_line+0x5c>
    12b4:	21 c0       	rjmp	.+66     	; 0x12f8 <gfx_mono_generic_draw_horizontal_line+0xb8>
    12b6:	c4 2f       	mov	r28, r20
    12b8:	1f ef       	ldi	r17, 0xFF	; 255
    12ba:	18 0f       	add	r17, r24
    12bc:	fa 2e       	mov	r15, r26
    12be:	f0 94       	com	r15
    12c0:	01 2f       	mov	r16, r17
    12c2:	0c 0f       	add	r16, r28
    12c4:	60 2f       	mov	r22, r16
    12c6:	8d 2f       	mov	r24, r29
    12c8:	0d dd       	rcall	.-1510   	; 0xce4 <gfx_mono_st7565r_get_byte>
    12ca:	4f 2d       	mov	r20, r15
    12cc:	48 23       	and	r20, r24
    12ce:	60 2f       	mov	r22, r16
    12d0:	8d 2f       	mov	r24, r29
    12d2:	e9 db       	rcall	.-2094   	; 0xaa6 <gfx_mono_st7565r_put_byte>
    12d4:	c1 50       	subi	r28, 0x01	; 1
    12d6:	a1 f7       	brne	.-24     	; 0x12c0 <gfx_mono_generic_draw_horizontal_line+0x80>
    12d8:	0f c0       	rjmp	.+30     	; 0x12f8 <gfx_mono_generic_draw_horizontal_line+0xb8>
    12da:	c4 2f       	mov	r28, r20
    12dc:	1f ef       	ldi	r17, 0xFF	; 255
    12de:	18 0f       	add	r17, r24
    12e0:	01 2f       	mov	r16, r17
    12e2:	0c 0f       	add	r16, r28
    12e4:	60 2f       	mov	r22, r16
    12e6:	8d 2f       	mov	r24, r29
    12e8:	fd dc       	rcall	.-1542   	; 0xce4 <gfx_mono_st7565r_get_byte>
    12ea:	4f 2d       	mov	r20, r15
    12ec:	48 27       	eor	r20, r24
    12ee:	60 2f       	mov	r22, r16
    12f0:	8d 2f       	mov	r24, r29
    12f2:	d9 db       	rcall	.-2126   	; 0xaa6 <gfx_mono_st7565r_put_byte>
    12f4:	c1 50       	subi	r28, 0x01	; 1
    12f6:	a1 f7       	brne	.-24     	; 0x12e0 <gfx_mono_generic_draw_horizontal_line+0xa0>
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	ff 90       	pop	r15
    1302:	08 95       	ret

00001304 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    1304:	ff 92       	push	r15
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
	if (height == 0) {
    130e:	22 23       	and	r18, r18
    1310:	69 f0       	breq	.+26     	; 0x132c <gfx_mono_generic_draw_filled_rect+0x28>
    1312:	f4 2e       	mov	r15, r20
    1314:	18 2f       	mov	r17, r24
    1316:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    1318:	df ef       	ldi	r29, 0xFF	; 255
    131a:	d6 0f       	add	r29, r22
    131c:	6d 2f       	mov	r22, r29
    131e:	6c 0f       	add	r22, r28
    1320:	20 2f       	mov	r18, r16
    1322:	4f 2d       	mov	r20, r15
    1324:	81 2f       	mov	r24, r17
    1326:	8c df       	rcall	.-232    	; 0x1240 <gfx_mono_generic_draw_horizontal_line>
    1328:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    132a:	c1 f7       	brne	.-16     	; 0x131c <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	08 95       	ret

00001338 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    1338:	af 92       	push	r10
    133a:	bf 92       	push	r11
    133c:	cf 92       	push	r12
    133e:	df 92       	push	r13
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	c8 2f       	mov	r28, r24
    134e:	e6 2e       	mov	r14, r22
    1350:	b4 2e       	mov	r11, r20
    1352:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    1354:	00 e0       	ldi	r16, 0x00	; 0
    1356:	f9 01       	movw	r30, r18
    1358:	24 81       	ldd	r18, Z+4	; 0x04
    135a:	43 81       	ldd	r20, Z+3	; 0x03
    135c:	6b 2d       	mov	r22, r11
    135e:	8e 2d       	mov	r24, r14
    1360:	d1 df       	rcall	.-94     	; 0x1304 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    1362:	f6 01       	movw	r30, r12
    1364:	80 81       	ld	r24, Z
    1366:	81 11       	cpse	r24, r1
    1368:	39 c0       	rjmp	.+114    	; 0x13dc <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    136a:	83 81       	ldd	r24, Z+3	; 0x03
    136c:	28 2f       	mov	r18, r24
    136e:	26 95       	lsr	r18
    1370:	26 95       	lsr	r18
    1372:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    1374:	87 70       	andi	r24, 0x07	; 7
    1376:	09 f0       	breq	.+2      	; 0x137a <gfx_mono_draw_char+0x42>
		char_row_size++;
    1378:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    137a:	f6 01       	movw	r30, r12
    137c:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    137e:	8c 2f       	mov	r24, r28
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	35 81       	ldd	r19, Z+5	; 0x05
    1384:	83 1b       	sub	r24, r19
    1386:	91 09       	sbc	r25, r1
    1388:	2a 9d       	mul	r18, r10
    138a:	90 01       	movw	r18, r0
    138c:	11 24       	eor	r1, r1
    138e:	82 9f       	mul	r24, r18
    1390:	a0 01       	movw	r20, r0
    1392:	83 9f       	mul	r24, r19
    1394:	50 0d       	add	r21, r0
    1396:	92 9f       	mul	r25, r18
    1398:	50 0d       	add	r21, r0
    139a:	11 24       	eor	r1, r1
    139c:	01 81       	ldd	r16, Z+1	; 0x01
    139e:	12 81       	ldd	r17, Z+2	; 0x02
    13a0:	04 0f       	add	r16, r20
    13a2:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    13a4:	f6 01       	movw	r30, r12
    13a6:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    13a8:	ff 20       	and	r15, r15
    13aa:	a1 f0       	breq	.+40     	; 0x13d4 <gfx_mono_draw_char+0x9c>
    13ac:	d0 e0       	ldi	r29, 0x00	; 0
    13ae:	c0 e0       	ldi	r28, 0x00	; 0
    13b0:	8e 2d       	mov	r24, r14
    13b2:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    13b4:	9c 2f       	mov	r25, r28
    13b6:	97 70       	andi	r25, 0x07	; 7
    13b8:	21 f4       	brne	.+8      	; 0x13c2 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    13ba:	f8 01       	movw	r30, r16
    13bc:	d4 91       	lpm	r29, Z
				glyph_data++;
    13be:	0f 5f       	subi	r16, 0xFF	; 255
    13c0:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    13c2:	dd 23       	and	r29, r29
    13c4:	1c f4       	brge	.+6      	; 0x13cc <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	6b 2d       	mov	r22, r11
    13ca:	56 dc       	rcall	.-1876   	; 0xc78 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    13cc:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    13ce:	cf 5f       	subi	r28, 0xFF	; 255
    13d0:	fc 12       	cpse	r15, r28
    13d2:	ee cf       	rjmp	.-36     	; 0x13b0 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    13d4:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    13d6:	aa 94       	dec	r10
	} while (rows_left > 0);
    13d8:	a1 10       	cpse	r10, r1
    13da:	e4 cf       	rjmp	.-56     	; 0x13a4 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	cf 90       	pop	r12
    13ec:	bf 90       	pop	r11
    13ee:	af 90       	pop	r10
    13f0:	08 95       	ret

000013f2 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    13f2:	df 92       	push	r13
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	d6 2e       	mov	r13, r22
    1402:	04 2f       	mov	r16, r20
    1404:	79 01       	movw	r14, r18
    1406:	ec 01       	movw	r28, r24
    1408:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    140a:	89 91       	ld	r24, Y+
    140c:	8a 30       	cpi	r24, 0x0A	; 10
    140e:	31 f4       	brne	.+12     	; 0x141c <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    1410:	f7 01       	movw	r30, r14
    1412:	84 81       	ldd	r24, Z+4	; 0x04
    1414:	8f 5f       	subi	r24, 0xFF	; 255
    1416:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1418:	1d 2d       	mov	r17, r13
    141a:	09 c0       	rjmp	.+18     	; 0x142e <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    141c:	8d 30       	cpi	r24, 0x0D	; 13
    141e:	39 f0       	breq	.+14     	; 0x142e <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    1420:	97 01       	movw	r18, r14
    1422:	40 2f       	mov	r20, r16
    1424:	61 2f       	mov	r22, r17
    1426:	88 df       	rcall	.-240    	; 0x1338 <gfx_mono_draw_char>
			x += font->width;
    1428:	f7 01       	movw	r30, r14
    142a:	83 81       	ldd	r24, Z+3	; 0x03
    142c:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    142e:	88 81       	ld	r24, Y
    1430:	81 11       	cpse	r24, r1
    1432:	eb cf       	rjmp	.-42     	; 0x140a <gfx_mono_draw_string+0x18>
}
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	ff 90       	pop	r15
    143e:	ef 90       	pop	r14
    1440:	df 90       	pop	r13
    1442:	08 95       	ret

00001444 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	1f 92       	push	r1
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    144e:	2f b7       	in	r18, 0x3f	; 63
    1450:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    1452:	f8 94       	cli
	return flags;
    1454:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1456:	28 2f       	mov	r18, r24
    1458:	39 2f       	mov	r19, r25
    145a:	21 15       	cp	r18, r1
    145c:	82 e0       	ldi	r24, 0x02	; 2
    145e:	38 07       	cpc	r19, r24
    1460:	29 f4       	brne	.+10     	; 0x146c <adc_set_callback+0x28>
		adca_callback = callback;
    1462:	60 93 f8 22 	sts	0x22F8, r22	; 0x8022f8 <adca_callback>
    1466:	70 93 f9 22 	sts	0x22F9, r23	; 0x8022f9 <adca_callback+0x1>
    146a:	07 c0       	rjmp	.+14     	; 0x147a <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    146c:	20 34       	cpi	r18, 0x40	; 64
    146e:	32 40       	sbci	r19, 0x02	; 2
    1470:	21 f4       	brne	.+8      	; 0x147a <adc_set_callback+0x36>
		adcb_callback = callback;
    1472:	60 93 f6 22 	sts	0x22F6, r22	; 0x8022f6 <adcb_callback>
    1476:	70 93 f7 22 	sts	0x22F7, r23	; 0x8022f7 <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    147a:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    147c:	0f 90       	pop	r0
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	08 95       	ret

00001484 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    1484:	81 15       	cp	r24, r1
    1486:	22 e0       	ldi	r18, 0x02	; 2
    1488:	92 07       	cpc	r25, r18
    148a:	61 f4       	brne	.+24     	; 0x14a4 <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    148c:	80 91 75 22 	lds	r24, 0x2275	; 0x802275 <adca_enable_count>
    1490:	91 e0       	ldi	r25, 0x01	; 1
    1492:	98 0f       	add	r25, r24
    1494:	90 93 75 22 	sts	0x2275, r25	; 0x802275 <adca_enable_count>
    1498:	81 11       	cpse	r24, r1
    149a:	12 c0       	rjmp	.+36     	; 0x14c0 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    149c:	62 e0       	ldi	r22, 0x02	; 2
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	1e c3       	rjmp	.+1596   	; 0x1ade <sysclk_enable_module>
    14a2:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    14a4:	80 34       	cpi	r24, 0x40	; 64
    14a6:	92 40       	sbci	r25, 0x02	; 2
    14a8:	59 f4       	brne	.+22     	; 0x14c0 <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    14aa:	80 91 74 22 	lds	r24, 0x2274	; 0x802274 <adcb_enable_count>
    14ae:	91 e0       	ldi	r25, 0x01	; 1
    14b0:	98 0f       	add	r25, r24
    14b2:	90 93 74 22 	sts	0x2274, r25	; 0x802274 <adcb_enable_count>
    14b6:	81 11       	cpse	r24, r1
    14b8:	03 c0       	rjmp	.+6      	; 0x14c0 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    14ba:	62 e0       	ldi	r22, 0x02	; 2
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	0f c3       	rjmp	.+1566   	; 0x1ade <sysclk_enable_module>
    14c0:	08 95       	ret

000014c2 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    14c2:	81 15       	cp	r24, r1
    14c4:	22 e0       	ldi	r18, 0x02	; 2
    14c6:	92 07       	cpc	r25, r18
    14c8:	59 f4       	brne	.+22     	; 0x14e0 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    14ca:	80 91 75 22 	lds	r24, 0x2275	; 0x802275 <adca_enable_count>
    14ce:	81 50       	subi	r24, 0x01	; 1
    14d0:	80 93 75 22 	sts	0x2275, r24	; 0x802275 <adca_enable_count>
    14d4:	81 11       	cpse	r24, r1
    14d6:	11 c0       	rjmp	.+34     	; 0x14fa <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    14d8:	62 e0       	ldi	r22, 0x02	; 2
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	16 c3       	rjmp	.+1580   	; 0x1b0a <sysclk_disable_module>
    14de:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    14e0:	80 34       	cpi	r24, 0x40	; 64
    14e2:	92 40       	sbci	r25, 0x02	; 2
    14e4:	51 f4       	brne	.+20     	; 0x14fa <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    14e6:	80 91 74 22 	lds	r24, 0x2274	; 0x802274 <adcb_enable_count>
    14ea:	81 50       	subi	r24, 0x01	; 1
    14ec:	80 93 74 22 	sts	0x2274, r24	; 0x802274 <adcb_enable_count>
    14f0:	81 11       	cpse	r24, r1
    14f2:	03 c0       	rjmp	.+6      	; 0x14fa <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    14f4:	62 e0       	ldi	r22, 0x02	; 2
    14f6:	82 e0       	ldi	r24, 0x02	; 2
    14f8:	08 c3       	rjmp	.+1552   	; 0x1b0a <sysclk_disable_module>
    14fa:	08 95       	ret

000014fc <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    14fc:	ef 92       	push	r14
    14fe:	ff 92       	push	r15
    1500:	1f 93       	push	r17
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	1f 92       	push	r1
    1508:	1f 92       	push	r1
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1510:	8f b7       	in	r24, 0x3f	; 63
    1512:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1514:	f8 94       	cli
	return flags;
    1516:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    1518:	c7 01       	movw	r24, r14
    151a:	b4 df       	rcall	.-152    	; 0x1484 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    151c:	f7 01       	movw	r30, r14
    151e:	80 81       	ld	r24, Z
    1520:	81 60       	ori	r24, 0x01	; 1
    1522:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1524:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1526:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <sleepmgr_locks+0x1>
    152a:	8f 3f       	cpi	r24, 0xFF	; 255
    152c:	09 f4       	brne	.+2      	; 0x1530 <adc_enable+0x34>
    152e:	ff cf       	rjmp	.-2      	; 0x152e <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1530:	8f b7       	in	r24, 0x3f	; 63
    1532:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1534:	f8 94       	cli
	return flags;
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1538:	ea ef       	ldi	r30, 0xFA	; 250
    153a:	f2 e2       	ldi	r31, 0x22	; 34
    153c:	81 81       	ldd	r24, Z+1	; 0x01
    153e:	8f 5f       	subi	r24, 0xFF	; 255
    1540:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1542:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	ff 90       	pop	r15
    1550:	ef 90       	pop	r14
    1552:	08 95       	ret

00001554 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    1554:	1f 92       	push	r1
    1556:	0f 92       	push	r0
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	0f 92       	push	r0
    155c:	11 24       	eor	r1, r1
    155e:	0b b6       	in	r0, 0x3b	; 59
    1560:	0f 92       	push	r0
    1562:	2f 93       	push	r18
    1564:	3f 93       	push	r19
    1566:	4f 93       	push	r20
    1568:	5f 93       	push	r21
    156a:	6f 93       	push	r22
    156c:	7f 93       	push	r23
    156e:	8f 93       	push	r24
    1570:	9f 93       	push	r25
    1572:	af 93       	push	r26
    1574:	bf 93       	push	r27
    1576:	ef 93       	push	r30
    1578:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    157a:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x7be224>
    157e:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x7be225>
    1582:	e0 91 f8 22 	lds	r30, 0x22F8	; 0x8022f8 <adca_callback>
    1586:	f0 91 f9 22 	lds	r31, 0x22F9	; 0x8022f9 <adca_callback+0x1>
    158a:	61 e0       	ldi	r22, 0x01	; 1
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	92 e0       	ldi	r25, 0x02	; 2
    1590:	19 95       	eicall
}
    1592:	ff 91       	pop	r31
    1594:	ef 91       	pop	r30
    1596:	bf 91       	pop	r27
    1598:	af 91       	pop	r26
    159a:	9f 91       	pop	r25
    159c:	8f 91       	pop	r24
    159e:	7f 91       	pop	r23
    15a0:	6f 91       	pop	r22
    15a2:	5f 91       	pop	r21
    15a4:	4f 91       	pop	r20
    15a6:	3f 91       	pop	r19
    15a8:	2f 91       	pop	r18
    15aa:	0f 90       	pop	r0
    15ac:	0b be       	out	0x3b, r0	; 59
    15ae:	0f 90       	pop	r0
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	0f 90       	pop	r0
    15b4:	1f 90       	pop	r1
    15b6:	18 95       	reti

000015b8 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    15b8:	1f 92       	push	r1
    15ba:	0f 92       	push	r0
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	0f 92       	push	r0
    15c0:	11 24       	eor	r1, r1
    15c2:	0b b6       	in	r0, 0x3b	; 59
    15c4:	0f 92       	push	r0
    15c6:	2f 93       	push	r18
    15c8:	3f 93       	push	r19
    15ca:	4f 93       	push	r20
    15cc:	5f 93       	push	r21
    15ce:	6f 93       	push	r22
    15d0:	7f 93       	push	r23
    15d2:	8f 93       	push	r24
    15d4:	9f 93       	push	r25
    15d6:	af 93       	push	r26
    15d8:	bf 93       	push	r27
    15da:	ef 93       	push	r30
    15dc:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    15de:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x7be22c>
    15e2:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x7be22d>
    15e6:	e0 91 f8 22 	lds	r30, 0x22F8	; 0x8022f8 <adca_callback>
    15ea:	f0 91 f9 22 	lds	r31, 0x22F9	; 0x8022f9 <adca_callback+0x1>
    15ee:	62 e0       	ldi	r22, 0x02	; 2
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	92 e0       	ldi	r25, 0x02	; 2
    15f4:	19 95       	eicall
}
    15f6:	ff 91       	pop	r31
    15f8:	ef 91       	pop	r30
    15fa:	bf 91       	pop	r27
    15fc:	af 91       	pop	r26
    15fe:	9f 91       	pop	r25
    1600:	8f 91       	pop	r24
    1602:	7f 91       	pop	r23
    1604:	6f 91       	pop	r22
    1606:	5f 91       	pop	r21
    1608:	4f 91       	pop	r20
    160a:	3f 91       	pop	r19
    160c:	2f 91       	pop	r18
    160e:	0f 90       	pop	r0
    1610:	0b be       	out	0x3b, r0	; 59
    1612:	0f 90       	pop	r0
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	0f 90       	pop	r0
    1618:	1f 90       	pop	r1
    161a:	18 95       	reti

0000161c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    161c:	1f 92       	push	r1
    161e:	0f 92       	push	r0
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	0f 92       	push	r0
    1624:	11 24       	eor	r1, r1
    1626:	0b b6       	in	r0, 0x3b	; 59
    1628:	0f 92       	push	r0
    162a:	2f 93       	push	r18
    162c:	3f 93       	push	r19
    162e:	4f 93       	push	r20
    1630:	5f 93       	push	r21
    1632:	6f 93       	push	r22
    1634:	7f 93       	push	r23
    1636:	8f 93       	push	r24
    1638:	9f 93       	push	r25
    163a:	af 93       	push	r26
    163c:	bf 93       	push	r27
    163e:	ef 93       	push	r30
    1640:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    1642:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x7be234>
    1646:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x7be235>
    164a:	e0 91 f8 22 	lds	r30, 0x22F8	; 0x8022f8 <adca_callback>
    164e:	f0 91 f9 22 	lds	r31, 0x22F9	; 0x8022f9 <adca_callback+0x1>
    1652:	64 e0       	ldi	r22, 0x04	; 4
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	92 e0       	ldi	r25, 0x02	; 2
    1658:	19 95       	eicall
}
    165a:	ff 91       	pop	r31
    165c:	ef 91       	pop	r30
    165e:	bf 91       	pop	r27
    1660:	af 91       	pop	r26
    1662:	9f 91       	pop	r25
    1664:	8f 91       	pop	r24
    1666:	7f 91       	pop	r23
    1668:	6f 91       	pop	r22
    166a:	5f 91       	pop	r21
    166c:	4f 91       	pop	r20
    166e:	3f 91       	pop	r19
    1670:	2f 91       	pop	r18
    1672:	0f 90       	pop	r0
    1674:	0b be       	out	0x3b, r0	; 59
    1676:	0f 90       	pop	r0
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	0f 90       	pop	r0
    167c:	1f 90       	pop	r1
    167e:	18 95       	reti

00001680 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    1680:	1f 92       	push	r1
    1682:	0f 92       	push	r0
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	0f 92       	push	r0
    1688:	11 24       	eor	r1, r1
    168a:	0b b6       	in	r0, 0x3b	; 59
    168c:	0f 92       	push	r0
    168e:	2f 93       	push	r18
    1690:	3f 93       	push	r19
    1692:	4f 93       	push	r20
    1694:	5f 93       	push	r21
    1696:	6f 93       	push	r22
    1698:	7f 93       	push	r23
    169a:	8f 93       	push	r24
    169c:	9f 93       	push	r25
    169e:	af 93       	push	r26
    16a0:	bf 93       	push	r27
    16a2:	ef 93       	push	r30
    16a4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    16a6:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x7be23c>
    16aa:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x7be23d>
    16ae:	e0 91 f8 22 	lds	r30, 0x22F8	; 0x8022f8 <adca_callback>
    16b2:	f0 91 f9 22 	lds	r31, 0x22F9	; 0x8022f9 <adca_callback+0x1>
    16b6:	68 e0       	ldi	r22, 0x08	; 8
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	92 e0       	ldi	r25, 0x02	; 2
    16bc:	19 95       	eicall
}
    16be:	ff 91       	pop	r31
    16c0:	ef 91       	pop	r30
    16c2:	bf 91       	pop	r27
    16c4:	af 91       	pop	r26
    16c6:	9f 91       	pop	r25
    16c8:	8f 91       	pop	r24
    16ca:	7f 91       	pop	r23
    16cc:	6f 91       	pop	r22
    16ce:	5f 91       	pop	r21
    16d0:	4f 91       	pop	r20
    16d2:	3f 91       	pop	r19
    16d4:	2f 91       	pop	r18
    16d6:	0f 90       	pop	r0
    16d8:	0b be       	out	0x3b, r0	; 59
    16da:	0f 90       	pop	r0
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	0f 90       	pop	r0
    16e0:	1f 90       	pop	r1
    16e2:	18 95       	reti

000016e4 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    16e4:	1f 92       	push	r1
    16e6:	0f 92       	push	r0
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	0f 92       	push	r0
    16ec:	11 24       	eor	r1, r1
    16ee:	0b b6       	in	r0, 0x3b	; 59
    16f0:	0f 92       	push	r0
    16f2:	2f 93       	push	r18
    16f4:	3f 93       	push	r19
    16f6:	4f 93       	push	r20
    16f8:	5f 93       	push	r21
    16fa:	6f 93       	push	r22
    16fc:	7f 93       	push	r23
    16fe:	8f 93       	push	r24
    1700:	9f 93       	push	r25
    1702:	af 93       	push	r26
    1704:	bf 93       	push	r27
    1706:	ef 93       	push	r30
    1708:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    170a:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x7be264>
    170e:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x7be265>
    1712:	e0 91 f6 22 	lds	r30, 0x22F6	; 0x8022f6 <adcb_callback>
    1716:	f0 91 f7 22 	lds	r31, 0x22F7	; 0x8022f7 <adcb_callback+0x1>
    171a:	61 e0       	ldi	r22, 0x01	; 1
    171c:	80 e4       	ldi	r24, 0x40	; 64
    171e:	92 e0       	ldi	r25, 0x02	; 2
    1720:	19 95       	eicall
}
    1722:	ff 91       	pop	r31
    1724:	ef 91       	pop	r30
    1726:	bf 91       	pop	r27
    1728:	af 91       	pop	r26
    172a:	9f 91       	pop	r25
    172c:	8f 91       	pop	r24
    172e:	7f 91       	pop	r23
    1730:	6f 91       	pop	r22
    1732:	5f 91       	pop	r21
    1734:	4f 91       	pop	r20
    1736:	3f 91       	pop	r19
    1738:	2f 91       	pop	r18
    173a:	0f 90       	pop	r0
    173c:	0b be       	out	0x3b, r0	; 59
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    1748:	1f 92       	push	r1
    174a:	0f 92       	push	r0
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	0f 92       	push	r0
    1750:	11 24       	eor	r1, r1
    1752:	0b b6       	in	r0, 0x3b	; 59
    1754:	0f 92       	push	r0
    1756:	2f 93       	push	r18
    1758:	3f 93       	push	r19
    175a:	4f 93       	push	r20
    175c:	5f 93       	push	r21
    175e:	6f 93       	push	r22
    1760:	7f 93       	push	r23
    1762:	8f 93       	push	r24
    1764:	9f 93       	push	r25
    1766:	af 93       	push	r26
    1768:	bf 93       	push	r27
    176a:	ef 93       	push	r30
    176c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    176e:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x7be26c>
    1772:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x7be26d>
    1776:	e0 91 f6 22 	lds	r30, 0x22F6	; 0x8022f6 <adcb_callback>
    177a:	f0 91 f7 22 	lds	r31, 0x22F7	; 0x8022f7 <adcb_callback+0x1>
    177e:	62 e0       	ldi	r22, 0x02	; 2
    1780:	80 e4       	ldi	r24, 0x40	; 64
    1782:	92 e0       	ldi	r25, 0x02	; 2
    1784:	19 95       	eicall
}
    1786:	ff 91       	pop	r31
    1788:	ef 91       	pop	r30
    178a:	bf 91       	pop	r27
    178c:	af 91       	pop	r26
    178e:	9f 91       	pop	r25
    1790:	8f 91       	pop	r24
    1792:	7f 91       	pop	r23
    1794:	6f 91       	pop	r22
    1796:	5f 91       	pop	r21
    1798:	4f 91       	pop	r20
    179a:	3f 91       	pop	r19
    179c:	2f 91       	pop	r18
    179e:	0f 90       	pop	r0
    17a0:	0b be       	out	0x3b, r0	; 59
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    17ac:	1f 92       	push	r1
    17ae:	0f 92       	push	r0
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	0f 92       	push	r0
    17b4:	11 24       	eor	r1, r1
    17b6:	0b b6       	in	r0, 0x3b	; 59
    17b8:	0f 92       	push	r0
    17ba:	2f 93       	push	r18
    17bc:	3f 93       	push	r19
    17be:	4f 93       	push	r20
    17c0:	5f 93       	push	r21
    17c2:	6f 93       	push	r22
    17c4:	7f 93       	push	r23
    17c6:	8f 93       	push	r24
    17c8:	9f 93       	push	r25
    17ca:	af 93       	push	r26
    17cc:	bf 93       	push	r27
    17ce:	ef 93       	push	r30
    17d0:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    17d2:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x7be274>
    17d6:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x7be275>
    17da:	e0 91 f6 22 	lds	r30, 0x22F6	; 0x8022f6 <adcb_callback>
    17de:	f0 91 f7 22 	lds	r31, 0x22F7	; 0x8022f7 <adcb_callback+0x1>
    17e2:	64 e0       	ldi	r22, 0x04	; 4
    17e4:	80 e4       	ldi	r24, 0x40	; 64
    17e6:	92 e0       	ldi	r25, 0x02	; 2
    17e8:	19 95       	eicall
}
    17ea:	ff 91       	pop	r31
    17ec:	ef 91       	pop	r30
    17ee:	bf 91       	pop	r27
    17f0:	af 91       	pop	r26
    17f2:	9f 91       	pop	r25
    17f4:	8f 91       	pop	r24
    17f6:	7f 91       	pop	r23
    17f8:	6f 91       	pop	r22
    17fa:	5f 91       	pop	r21
    17fc:	4f 91       	pop	r20
    17fe:	3f 91       	pop	r19
    1800:	2f 91       	pop	r18
    1802:	0f 90       	pop	r0
    1804:	0b be       	out	0x3b, r0	; 59
    1806:	0f 90       	pop	r0
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	0f 90       	pop	r0
    180c:	1f 90       	pop	r1
    180e:	18 95       	reti

00001810 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    1810:	1f 92       	push	r1
    1812:	0f 92       	push	r0
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	0f 92       	push	r0
    1818:	11 24       	eor	r1, r1
    181a:	0b b6       	in	r0, 0x3b	; 59
    181c:	0f 92       	push	r0
    181e:	2f 93       	push	r18
    1820:	3f 93       	push	r19
    1822:	4f 93       	push	r20
    1824:	5f 93       	push	r21
    1826:	6f 93       	push	r22
    1828:	7f 93       	push	r23
    182a:	8f 93       	push	r24
    182c:	9f 93       	push	r25
    182e:	af 93       	push	r26
    1830:	bf 93       	push	r27
    1832:	ef 93       	push	r30
    1834:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    1836:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x7be27c>
    183a:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x7be27d>
    183e:	e0 91 f6 22 	lds	r30, 0x22F6	; 0x8022f6 <adcb_callback>
    1842:	f0 91 f7 22 	lds	r31, 0x22F7	; 0x8022f7 <adcb_callback+0x1>
    1846:	68 e0       	ldi	r22, 0x08	; 8
    1848:	80 e4       	ldi	r24, 0x40	; 64
    184a:	92 e0       	ldi	r25, 0x02	; 2
    184c:	19 95       	eicall
}
    184e:	ff 91       	pop	r31
    1850:	ef 91       	pop	r30
    1852:	bf 91       	pop	r27
    1854:	af 91       	pop	r26
    1856:	9f 91       	pop	r25
    1858:	8f 91       	pop	r24
    185a:	7f 91       	pop	r23
    185c:	6f 91       	pop	r22
    185e:	5f 91       	pop	r21
    1860:	4f 91       	pop	r20
    1862:	3f 91       	pop	r19
    1864:	2f 91       	pop	r18
    1866:	0f 90       	pop	r0
    1868:	0b be       	out	0x3b, r0	; 59
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	0f 90       	pop	r0
    1870:	1f 90       	pop	r1
    1872:	18 95       	reti

00001874 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    1874:	bf 92       	push	r11
    1876:	cf 92       	push	r12
    1878:	df 92       	push	r13
    187a:	ef 92       	push	r14
    187c:	ff 92       	push	r15
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	1f 92       	push	r1
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	8c 01       	movw	r16, r24
    188e:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1890:	81 15       	cp	r24, r1
    1892:	22 e0       	ldi	r18, 0x02	; 2
    1894:	92 07       	cpc	r25, r18
    1896:	71 f4       	brne	.+28     	; 0x18b4 <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1898:	61 e2       	ldi	r22, 0x21	; 33
    189a:	70 e0       	ldi	r23, 0x00	; 0
    189c:	82 e0       	ldi	r24, 0x02	; 2
    189e:	4a d1       	rcall	.+660    	; 0x1b34 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    18a0:	c8 2e       	mov	r12, r24
    18a2:	d1 2c       	mov	r13, r1
    18a4:	60 e2       	ldi	r22, 0x20	; 32
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	82 e0       	ldi	r24, 0x02	; 2
    18aa:	44 d1       	rcall	.+648    	; 0x1b34 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    18ac:	dc 2c       	mov	r13, r12
    18ae:	cc 24       	eor	r12, r12
    18b0:	c8 2a       	or	r12, r24
    18b2:	10 c0       	rjmp	.+32     	; 0x18d4 <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    18b4:	80 34       	cpi	r24, 0x40	; 64
    18b6:	92 40       	sbci	r25, 0x02	; 2
    18b8:	c1 f5       	brne	.+112    	; 0x192a <adc_write_configuration+0xb6>
    18ba:	65 e2       	ldi	r22, 0x25	; 37
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	39 d1       	rcall	.+626    	; 0x1b34 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    18c2:	c8 2e       	mov	r12, r24
    18c4:	d1 2c       	mov	r13, r1
    18c6:	64 e2       	ldi	r22, 0x24	; 36
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	82 e0       	ldi	r24, 0x02	; 2
    18cc:	33 d1       	rcall	.+614    	; 0x1b34 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    18ce:	dc 2c       	mov	r13, r12
    18d0:	cc 24       	eor	r12, r12
    18d2:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    18d4:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    18d6:	89 83       	std	Y+1, r24	; 0x01
	return flags;
    18d8:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    18da:	b9 80       	ldd	r11, Y+1	; 0x01
    18dc:	c8 01       	movw	r24, r16
    18de:	d2 dd       	rcall	.-1116   	; 0x1484 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    18e0:	f8 01       	movw	r30, r16
    18e2:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    18e4:	92 e0       	ldi	r25, 0x02	; 2
    18e6:	90 83       	st	Z, r25
	adc->CAL = cal;
    18e8:	c4 86       	std	Z+12, r12	; 0x0c
    18ea:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    18ec:	f7 01       	movw	r30, r14
    18ee:	25 81       	ldd	r18, Z+5	; 0x05
    18f0:	36 81       	ldd	r19, Z+6	; 0x06
    18f2:	f8 01       	movw	r30, r16
    18f4:	20 8f       	std	Z+24, r18	; 0x18
    18f6:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    18f8:	f7 01       	movw	r30, r14
    18fa:	92 81       	ldd	r25, Z+2	; 0x02
    18fc:	f8 01       	movw	r30, r16
    18fe:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    1900:	f7 01       	movw	r30, r14
    1902:	94 81       	ldd	r25, Z+4	; 0x04
    1904:	f8 01       	movw	r30, r16
    1906:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    1908:	f7 01       	movw	r30, r14
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	f8 01       	movw	r30, r16
    190e:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    1910:	f7 01       	movw	r30, r14
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	f8 01       	movw	r30, r16
    1916:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    1918:	81 70       	andi	r24, 0x01	; 1
    191a:	f7 01       	movw	r30, r14
    191c:	90 81       	ld	r25, Z
    191e:	89 2b       	or	r24, r25
    1920:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    1922:	80 83       	st	Z, r24
    1924:	c8 01       	movw	r24, r16
    1926:	cd dd       	rcall	.-1126   	; 0x14c2 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1928:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
    192a:	0f 90       	pop	r0
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	ff 90       	pop	r15
    1936:	ef 90       	pop	r14
    1938:	df 90       	pop	r13
    193a:	cf 90       	pop	r12
    193c:	bf 90       	pop	r11
    193e:	08 95       	ret

00001940 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    1940:	df 92       	push	r13
    1942:	ef 92       	push	r14
    1944:	ff 92       	push	r15
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	1f 92       	push	r1
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	8c 01       	movw	r16, r24
    1956:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1958:	8f b7       	in	r24, 0x3f	; 63
    195a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    195c:	f8 94       	cli
	return flags;
    195e:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    1960:	c8 01       	movw	r24, r16
    1962:	90 dd       	rcall	.-1248   	; 0x1484 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    1964:	f8 01       	movw	r30, r16
    1966:	80 81       	ld	r24, Z
    1968:	80 7c       	andi	r24, 0xC0	; 192
    196a:	f7 01       	movw	r30, r14
    196c:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    196e:	f8 01       	movw	r30, r16
    1970:	80 8d       	ldd	r24, Z+24	; 0x18
    1972:	91 8d       	ldd	r25, Z+25	; 0x19
    1974:	f7 01       	movw	r30, r14
    1976:	85 83       	std	Z+5, r24	; 0x05
    1978:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    197a:	f8 01       	movw	r30, r16
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	f7 01       	movw	r30, r14
    1980:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    1982:	f8 01       	movw	r30, r16
    1984:	84 81       	ldd	r24, Z+4	; 0x04
    1986:	f7 01       	movw	r30, r14
    1988:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    198a:	f8 01       	movw	r30, r16
    198c:	83 81       	ldd	r24, Z+3	; 0x03
    198e:	f7 01       	movw	r30, r14
    1990:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    1992:	f8 01       	movw	r30, r16
    1994:	81 81       	ldd	r24, Z+1	; 0x01
    1996:	f7 01       	movw	r30, r14
    1998:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    199a:	c8 01       	movw	r24, r16
    199c:	92 dd       	rcall	.-1244   	; 0x14c2 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    199e:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    19a0:	0f 90       	pop	r0
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	1f 91       	pop	r17
    19a8:	0f 91       	pop	r16
    19aa:	ff 90       	pop	r15
    19ac:	ef 90       	pop	r14
    19ae:	df 90       	pop	r13
    19b0:	08 95       	ret

000019b2 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    19b2:	af 92       	push	r10
    19b4:	bf 92       	push	r11
    19b6:	cf 92       	push	r12
    19b8:	df 92       	push	r13
    19ba:	ef 92       	push	r14
    19bc:	ff 92       	push	r15
    19be:	0f 93       	push	r16
    19c0:	1f 93       	push	r17
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	1f 92       	push	r1
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	6c 01       	movw	r12, r24
    19ce:	b6 2e       	mov	r11, r22
    19d0:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    19d2:	86 2f       	mov	r24, r22
    19d4:	83 70       	andi	r24, 0x03	; 3
    19d6:	29 f4       	brne	.+10     	; 0x19e2 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    19d8:	96 2f       	mov	r25, r22
    19da:	96 95       	lsr	r25
    19dc:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    19de:	82 e0       	ldi	r24, 0x02	; 2
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    19e2:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    19e4:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    19e6:	90 ff       	sbrs	r25, 0
		index++;
    19e8:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    19ea:	86 01       	movw	r16, r12
    19ec:	00 5e       	subi	r16, 0xE0	; 224
    19ee:	1f 4f       	sbci	r17, 0xFF	; 255
    19f0:	98 e0       	ldi	r25, 0x08	; 8
    19f2:	89 9f       	mul	r24, r25
    19f4:	00 0d       	add	r16, r0
    19f6:	11 1d       	adc	r17, r1
    19f8:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    19fa:	8f b7       	in	r24, 0x3f	; 63
    19fc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    19fe:	f8 94       	cli
	return flags;
    1a00:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1a02:	c6 01       	movw	r24, r12
    1a04:	3f dd       	rcall	.-1410   	; 0x1484 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1a06:	f7 01       	movw	r30, r14
    1a08:	80 81       	ld	r24, Z
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1a0e:	f7 01       	movw	r30, r14
    1a10:	82 81       	ldd	r24, Z+2	; 0x02
    1a12:	f8 01       	movw	r30, r16
    1a14:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1a16:	f7 01       	movw	r30, r14
    1a18:	81 81       	ldd	r24, Z+1	; 0x01
    1a1a:	f8 01       	movw	r30, r16
    1a1c:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1a1e:	b0 fe       	sbrs	r11, 0
    1a20:	04 c0       	rjmp	.+8      	; 0x1a2a <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1a22:	f7 01       	movw	r30, r14
    1a24:	83 81       	ldd	r24, Z+3	; 0x03
    1a26:	f8 01       	movw	r30, r16
    1a28:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    1a2a:	c6 01       	movw	r24, r12
    1a2c:	4a dd       	rcall	.-1388   	; 0x14c2 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a2e:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    1a30:	0f 90       	pop	r0
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	df 90       	pop	r13
    1a40:	cf 90       	pop	r12
    1a42:	bf 90       	pop	r11
    1a44:	af 90       	pop	r10
    1a46:	08 95       	ret

00001a48 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1a48:	af 92       	push	r10
    1a4a:	bf 92       	push	r11
    1a4c:	cf 92       	push	r12
    1a4e:	df 92       	push	r13
    1a50:	ef 92       	push	r14
    1a52:	ff 92       	push	r15
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	1f 92       	push	r1
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	6c 01       	movw	r12, r24
    1a64:	b6 2e       	mov	r11, r22
    1a66:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1a68:	86 2f       	mov	r24, r22
    1a6a:	83 70       	andi	r24, 0x03	; 3
    1a6c:	29 f4       	brne	.+10     	; 0x1a78 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    1a6e:	96 2f       	mov	r25, r22
    1a70:	96 95       	lsr	r25
    1a72:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1a74:	82 e0       	ldi	r24, 0x02	; 2
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1a78:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1a7c:	90 ff       	sbrs	r25, 0
		index++;
    1a7e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1a80:	86 01       	movw	r16, r12
    1a82:	00 5e       	subi	r16, 0xE0	; 224
    1a84:	1f 4f       	sbci	r17, 0xFF	; 255
    1a86:	98 e0       	ldi	r25, 0x08	; 8
    1a88:	89 9f       	mul	r24, r25
    1a8a:	00 0d       	add	r16, r0
    1a8c:	11 1d       	adc	r17, r1
    1a8e:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1a90:	8f b7       	in	r24, 0x3f	; 63
    1a92:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1a94:	f8 94       	cli
	return flags;
    1a96:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    1a98:	c6 01       	movw	r24, r12
    1a9a:	f4 dc       	rcall	.-1560   	; 0x1484 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    1a9c:	f8 01       	movw	r30, r16
    1a9e:	80 81       	ld	r24, Z
    1aa0:	f7 01       	movw	r30, r14
    1aa2:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    1aa4:	f8 01       	movw	r30, r16
    1aa6:	82 81       	ldd	r24, Z+2	; 0x02
    1aa8:	f7 01       	movw	r30, r14
    1aaa:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    1aac:	f8 01       	movw	r30, r16
    1aae:	81 81       	ldd	r24, Z+1	; 0x01
    1ab0:	f7 01       	movw	r30, r14
    1ab2:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1ab4:	b0 fe       	sbrs	r11, 0
    1ab6:	04 c0       	rjmp	.+8      	; 0x1ac0 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1ab8:	f8 01       	movw	r30, r16
    1aba:	86 81       	ldd	r24, Z+6	; 0x06
    1abc:	f7 01       	movw	r30, r14
    1abe:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    1ac0:	c6 01       	movw	r24, r12
    1ac2:	ff dc       	rcall	.-1538   	; 0x14c2 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1ac4:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    1ac6:	0f 90       	pop	r0
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	ff 90       	pop	r15
    1ad2:	ef 90       	pop	r14
    1ad4:	df 90       	pop	r13
    1ad6:	cf 90       	pop	r12
    1ad8:	bf 90       	pop	r11
    1ada:	af 90       	pop	r10
    1adc:	08 95       	ret

00001ade <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	1f 92       	push	r1
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1ae8:	9f b7       	in	r25, 0x3f	; 63
    1aea:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1aec:	f8 94       	cli
	return flags;
    1aee:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1af0:	e8 2f       	mov	r30, r24
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	e0 59       	subi	r30, 0x90	; 144
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	60 95       	com	r22
    1afa:	80 81       	ld	r24, Z
    1afc:	68 23       	and	r22, r24
    1afe:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b00:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1b02:	0f 90       	pop	r0
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	08 95       	ret

00001b0a <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	1f 92       	push	r1
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1b14:	9f b7       	in	r25, 0x3f	; 63
    1b16:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1b18:	f8 94       	cli
	return flags;
    1b1a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1b1c:	e8 2f       	mov	r30, r24
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	e0 59       	subi	r30, 0x90	; 144
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
    1b26:	68 2b       	or	r22, r24
    1b28:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b2a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1b2c:	0f 90       	pop	r0
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	08 95       	ret

00001b34 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1b34:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1b38:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1b3a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1b3c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1b40:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1b42:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1b46:	08 95       	ret

00001b48 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1b52:	c6 2f       	mov	r28, r22
    1b54:	d0 e0       	ldi	r29, 0x00	; 0
    1b56:	de 01       	movw	r26, r28
    1b58:	02 2e       	mov	r0, r18
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <ioport_configure_port_pin+0x18>
    1b5c:	b5 95       	asr	r27
    1b5e:	a7 95       	ror	r26
    1b60:	0a 94       	dec	r0
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <ioport_configure_port_pin+0x14>
    1b64:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1b66:	50 8b       	std	Z+16, r21	; 0x10
    1b68:	2f 5f       	subi	r18, 0xFF	; 255
    1b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6c:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1b6e:	28 30       	cpi	r18, 0x08	; 8
    1b70:	31 05       	cpc	r19, r1
    1b72:	89 f7       	brne	.-30     	; 0x1b56 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1b74:	40 ff       	sbrs	r20, 0
    1b76:	0a c0       	rjmp	.+20     	; 0x1b8c <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    1b78:	41 ff       	sbrs	r20, 1
    1b7a:	03 c0       	rjmp	.+6      	; 0x1b82 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	65 83       	std	Z+5, r22	; 0x05
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1b82:	fc 01       	movw	r30, r24
    1b84:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1b86:	fc 01       	movw	r30, r24
    1b88:	61 83       	std	Z+1, r22	; 0x01
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	08 95       	ret

00001b96 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1b96:	43 e0       	ldi	r20, 0x03	; 3
    1b98:	50 e0       	ldi	r21, 0x00	; 0
    1b9a:	61 e0       	ldi	r22, 0x01	; 1
    1b9c:	80 ee       	ldi	r24, 0xE0	; 224
    1b9e:	97 e0       	ldi	r25, 0x07	; 7
    1ba0:	d3 df       	rcall	.-90     	; 0x1b48 <ioport_configure_port_pin>
    1ba2:	43 e0       	ldi	r20, 0x03	; 3
    1ba4:	50 e0       	ldi	r21, 0x00	; 0
    1ba6:	62 e0       	ldi	r22, 0x02	; 2
    1ba8:	80 ee       	ldi	r24, 0xE0	; 224
    1baa:	97 e0       	ldi	r25, 0x07	; 7
    1bac:	cd df       	rcall	.-102    	; 0x1b48 <ioport_configure_port_pin>
    1bae:	43 e0       	ldi	r20, 0x03	; 3
    1bb0:	50 e0       	ldi	r21, 0x00	; 0
    1bb2:	60 e1       	ldi	r22, 0x10	; 16
    1bb4:	80 e6       	ldi	r24, 0x60	; 96
    1bb6:	96 e0       	ldi	r25, 0x06	; 6
    1bb8:	c7 df       	rcall	.-114    	; 0x1b48 <ioport_configure_port_pin>
    1bba:	41 e0       	ldi	r20, 0x01	; 1
    1bbc:	50 e4       	ldi	r21, 0x40	; 64
    1bbe:	60 e2       	ldi	r22, 0x20	; 32
    1bc0:	80 e6       	ldi	r24, 0x60	; 96
    1bc2:	96 e0       	ldi	r25, 0x06	; 6
    1bc4:	c1 df       	rcall	.-126    	; 0x1b48 <ioport_configure_port_pin>
    1bc6:	40 e0       	ldi	r20, 0x00	; 0
    1bc8:	5b e1       	ldi	r21, 0x1B	; 27
    1bca:	60 e2       	ldi	r22, 0x20	; 32
    1bcc:	80 e8       	ldi	r24, 0x80	; 128
    1bce:	96 e0       	ldi	r25, 0x06	; 6
    1bd0:	bb df       	rcall	.-138    	; 0x1b48 <ioport_configure_port_pin>
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	5b e1       	ldi	r21, 0x1B	; 27
    1bd6:	62 e0       	ldi	r22, 0x02	; 2
    1bd8:	80 ea       	ldi	r24, 0xA0	; 160
    1bda:	96 e0       	ldi	r25, 0x06	; 6
    1bdc:	b5 df       	rcall	.-150    	; 0x1b48 <ioport_configure_port_pin>
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	5b e1       	ldi	r21, 0x1B	; 27
    1be2:	64 e0       	ldi	r22, 0x04	; 4
    1be4:	80 ea       	ldi	r24, 0xA0	; 160
    1be6:	96 e0       	ldi	r25, 0x06	; 6
    1be8:	af df       	rcall	.-162    	; 0x1b48 <ioport_configure_port_pin>
    1bea:	43 e0       	ldi	r20, 0x03	; 3
    1bec:	50 e0       	ldi	r21, 0x00	; 0
    1bee:	62 e0       	ldi	r22, 0x02	; 2
    1bf0:	80 e6       	ldi	r24, 0x60	; 96
    1bf2:	96 e0       	ldi	r25, 0x06	; 6
    1bf4:	a9 df       	rcall	.-174    	; 0x1b48 <ioport_configure_port_pin>
    1bf6:	43 e0       	ldi	r20, 0x03	; 3
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	68 e0       	ldi	r22, 0x08	; 8
    1bfc:	80 e6       	ldi	r24, 0x60	; 96
    1bfe:	96 e0       	ldi	r25, 0x06	; 6
    1c00:	a3 df       	rcall	.-186    	; 0x1b48 <ioport_configure_port_pin>
    1c02:	43 e0       	ldi	r20, 0x03	; 3
    1c04:	50 e0       	ldi	r21, 0x00	; 0
    1c06:	68 e0       	ldi	r22, 0x08	; 8
    1c08:	80 ea       	ldi	r24, 0xA0	; 160
    1c0a:	96 e0       	ldi	r25, 0x06	; 6
    1c0c:	9d df       	rcall	.-198    	; 0x1b48 <ioport_configure_port_pin>
    1c0e:	43 e0       	ldi	r20, 0x03	; 3
    1c10:	50 e0       	ldi	r21, 0x00	; 0
    1c12:	61 e0       	ldi	r22, 0x01	; 1
    1c14:	80 e6       	ldi	r24, 0x60	; 96
    1c16:	96 e0       	ldi	r25, 0x06	; 6
    1c18:	97 df       	rcall	.-210    	; 0x1b48 <ioport_configure_port_pin>
    1c1a:	43 e0       	ldi	r20, 0x03	; 3
    1c1c:	50 e0       	ldi	r21, 0x00	; 0
    1c1e:	68 e0       	ldi	r22, 0x08	; 8
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	96 e0       	ldi	r25, 0x06	; 6
    1c24:	91 df       	rcall	.-222    	; 0x1b48 <ioport_configure_port_pin>
    1c26:	41 e0       	ldi	r20, 0x01	; 1
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	60 e1       	ldi	r22, 0x10	; 16
    1c2c:	80 e8       	ldi	r24, 0x80	; 128
    1c2e:	96 e0       	ldi	r25, 0x06	; 6
    1c30:	8b df       	rcall	.-234    	; 0x1b48 <ioport_configure_port_pin>
    1c32:	43 e0       	ldi	r20, 0x03	; 3
    1c34:	50 e0       	ldi	r21, 0x00	; 0
    1c36:	62 e0       	ldi	r22, 0x02	; 2
    1c38:	80 e6       	ldi	r24, 0x60	; 96
    1c3a:	96 e0       	ldi	r25, 0x06	; 6
    1c3c:	85 df       	rcall	.-246    	; 0x1b48 <ioport_configure_port_pin>
    1c3e:	43 e0       	ldi	r20, 0x03	; 3
    1c40:	50 e0       	ldi	r21, 0x00	; 0
    1c42:	68 e0       	ldi	r22, 0x08	; 8
    1c44:	80 e6       	ldi	r24, 0x60	; 96
    1c46:	96 e0       	ldi	r25, 0x06	; 6
    1c48:	7f df       	rcall	.-258    	; 0x1b48 <ioport_configure_port_pin>
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	64 e0       	ldi	r22, 0x04	; 4
    1c50:	80 e6       	ldi	r24, 0x60	; 96
    1c52:	96 e0       	ldi	r25, 0x06	; 6
    1c54:	79 df       	rcall	.-270    	; 0x1b48 <ioport_configure_port_pin>
    1c56:	43 e0       	ldi	r20, 0x03	; 3
    1c58:	50 e0       	ldi	r21, 0x00	; 0
    1c5a:	60 e1       	ldi	r22, 0x10	; 16
    1c5c:	80 ea       	ldi	r24, 0xA0	; 160
    1c5e:	96 e0       	ldi	r25, 0x06	; 6
    1c60:	73 df       	rcall	.-282    	; 0x1b48 <ioport_configure_port_pin>
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	50 e0       	ldi	r21, 0x00	; 0
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	96 e0       	ldi	r25, 0x06	; 6
    1c6c:	6d df       	rcall	.-294    	; 0x1b48 <ioport_configure_port_pin>
    1c6e:	40 e0       	ldi	r20, 0x00	; 0
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	64 e0       	ldi	r22, 0x04	; 4
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	96 e0       	ldi	r25, 0x06	; 6
    1c78:	67 df       	rcall	.-306    	; 0x1b48 <ioport_configure_port_pin>
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	50 e0       	ldi	r21, 0x00	; 0
    1c7e:	62 e0       	ldi	r22, 0x02	; 2
    1c80:	80 e2       	ldi	r24, 0x20	; 32
    1c82:	96 e0       	ldi	r25, 0x06	; 6
    1c84:	61 df       	rcall	.-318    	; 0x1b48 <ioport_configure_port_pin>
    1c86:	43 e0       	ldi	r20, 0x03	; 3
    1c88:	50 e0       	ldi	r21, 0x00	; 0
    1c8a:	68 e0       	ldi	r22, 0x08	; 8
    1c8c:	80 e4       	ldi	r24, 0x40	; 64
    1c8e:	96 e0       	ldi	r25, 0x06	; 6
    1c90:	5b df       	rcall	.-330    	; 0x1b48 <ioport_configure_port_pin>
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	64 e0       	ldi	r22, 0x04	; 4
    1c98:	80 e4       	ldi	r24, 0x40	; 64
    1c9a:	96 e0       	ldi	r25, 0x06	; 6
    1c9c:	55 df       	rcall	.-342    	; 0x1b48 <ioport_configure_port_pin>
    1c9e:	43 e0       	ldi	r20, 0x03	; 3
    1ca0:	50 e0       	ldi	r21, 0x00	; 0
    1ca2:	68 e0       	ldi	r22, 0x08	; 8
    1ca4:	80 e6       	ldi	r24, 0x60	; 96
    1ca6:	96 e0       	ldi	r25, 0x06	; 6
    1ca8:	4f df       	rcall	.-354    	; 0x1b48 <ioport_configure_port_pin>
    1caa:	40 e0       	ldi	r20, 0x00	; 0
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	64 e0       	ldi	r22, 0x04	; 4
    1cb0:	80 e6       	ldi	r24, 0x60	; 96
    1cb2:	96 e0       	ldi	r25, 0x06	; 6
    1cb4:	49 df       	rcall	.-366    	; 0x1b48 <ioport_configure_port_pin>
    1cb6:	43 e0       	ldi	r20, 0x03	; 3
    1cb8:	50 e0       	ldi	r21, 0x00	; 0
    1cba:	68 e0       	ldi	r22, 0x08	; 8
    1cbc:	80 e8       	ldi	r24, 0x80	; 128
    1cbe:	96 e0       	ldi	r25, 0x06	; 6
    1cc0:	43 df       	rcall	.-378    	; 0x1b48 <ioport_configure_port_pin>
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	64 e0       	ldi	r22, 0x04	; 4
    1cc8:	80 e8       	ldi	r24, 0x80	; 128
    1cca:	96 e0       	ldi	r25, 0x06	; 6
    1ccc:	3d cf       	rjmp	.-390    	; 0x1b48 <ioport_configure_port_pin>
    1cce:	08 95       	ret

00001cd0 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1cd0:	04 c0       	rjmp	.+8      	; 0x1cda <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1cd2:	61 50       	subi	r22, 0x01	; 1
    1cd4:	71 09       	sbc	r23, r1
    1cd6:	81 09       	sbc	r24, r1
    1cd8:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1cda:	61 15       	cp	r22, r1
    1cdc:	71 05       	cpc	r23, r1
    1cde:	81 05       	cpc	r24, r1
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	b9 f7       	brne	.-18     	; 0x1cd2 <__portable_avr_delay_cycles+0x2>
    1ce4:	08 95       	ret

00001ce6 <main>:
#include <adc_sensors/adc_sensors.h>

static char strbuf[128];

int main (void)
{
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <main+0x6>
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
	/* Insert system clock initialization code here (sysclk_init()). */
	board_init();
    1cf0:	52 df       	rcall	.-348    	; 0x1b96 <board_init>

	/* Insert application code here, after the board has been initialized. */

	//init lcd
	gfx_mono_init();	
    1cf2:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <gfx_mono_st7565r_init>
	adc_sensors_init();
    1cf6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <adc_sensors_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    1cfa:	87 e0       	ldi	r24, 0x07	; 7
    1cfc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	
	// Inisialisasi interrupt vector
	pmic_init();
	cpu_irq_enable();
    1d00:	78 94       	sei
    1d02:	80 e1       	ldi	r24, 0x10	; 16
    1d04:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>

	//set background lcd on
	gpio_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);

	//set display - output lcd
	gfx_mono_draw_string("Welcome!",0, 0, &sysfont);
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e2       	ldi	r19, 0x20	; 32
    1d0c:	40 e0       	ldi	r20, 0x00	; 0
    1d0e:	60 e0       	ldi	r22, 0x00	; 0
    1d10:	87 e0       	ldi	r24, 0x07	; 7
    1d12:	90 e2       	ldi	r25, 0x20	; 32
    1d14:	6e db       	rcall	.-2340   	; 0x13f2 <gfx_mono_draw_string>
	delay_ms(1000);
    1d16:	66 e1       	ldi	r22, 0x16	; 22
    1d18:	76 e1       	ldi	r23, 0x16	; 22
    1d1a:	85 e0       	ldi	r24, 0x05	; 5
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	d8 df       	rcall	.-80     	; 0x1cd0 <__portable_avr_delay_cycles>
	gfx_mono_draw_string("We will use sensor",0, 8, &sysfont);
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e2       	ldi	r19, 0x20	; 32
    1d24:	48 e0       	ldi	r20, 0x08	; 8
    1d26:	60 e0       	ldi	r22, 0x00	; 0
    1d28:	80 e1       	ldi	r24, 0x10	; 16
    1d2a:	90 e2       	ldi	r25, 0x20	; 32
    1d2c:	62 db       	rcall	.-2364   	; 0x13f2 <gfx_mono_draw_string>
	delay_ms(1000);
    1d2e:	66 e1       	ldi	r22, 0x16	; 22
    1d30:	76 e1       	ldi	r23, 0x16	; 22
    1d32:	85 e0       	ldi	r24, 0x05	; 5
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	cc df       	rcall	.-104    	; 0x1cd0 <__portable_avr_delay_cycles>
	gfx_mono_draw_string("                   ",0, 8, &sysfont);
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e2       	ldi	r19, 0x20	; 32
    1d3c:	48 e0       	ldi	r20, 0x08	; 8
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	83 e2       	ldi	r24, 0x23	; 35
    1d42:	90 e2       	ldi	r25, 0x20	; 32
    1d44:	56 db       	rcall	.-2388   	; 0x13f2 <gfx_mono_draw_string>
	
	// Variable untuk sampling light sensor
	uint32_t intensity = 0;
	uint8_t iterations = 0;
	#define LIGHTSENSOR_NUM_SAMPLES 20
	int counter = 0;
    1d46:	c1 2c       	mov	r12, r1
    1d48:	d1 2c       	mov	r13, r1
	delay_ms(1000);
	gfx_mono_draw_string("                   ",0, 8, &sysfont);
	
	// Variable untuk sampling light sensor
	uint32_t intensity = 0;
	uint8_t iterations = 0;
    1d4a:	a1 2c       	mov	r10, r1
	gfx_mono_draw_string("We will use sensor",0, 8, &sysfont);
	delay_ms(1000);
	gfx_mono_draw_string("                   ",0, 8, &sysfont);
	
	// Variable untuk sampling light sensor
	uint32_t intensity = 0;
    1d4c:	21 2c       	mov	r2, r1
    1d4e:	31 2c       	mov	r3, r1
    1d50:	21 01       	movw	r4, r2
	int counter = 0;

	while (1)
	{	
		// Counter write
		snprintf(strbuf, sizeof(strbuf), "    Sensor Read (%2d)",counter);
    1d52:	0f 2e       	mov	r0, r31
    1d54:	f7 e3       	ldi	r31, 0x37	; 55
    1d56:	6f 2e       	mov	r6, r31
    1d58:	f0 e2       	ldi	r31, 0x20	; 32
    1d5a:	7f 2e       	mov	r7, r31
    1d5c:	f0 2d       	mov	r31, r0
    1d5e:	68 94       	set
    1d60:	bb 24       	eor	r11, r11
    1d62:	b7 f8       	bld	r11, 7
    1d64:	06 e7       	ldi	r16, 0x76	; 118
    1d66:	12 e2       	ldi	r17, 0x22	; 34
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    1d68:	e1 2c       	mov	r14, r1
    1d6a:	68 94       	set
    1d6c:	ff 24       	eor	r15, r15
    1d6e:	f1 f8       	bld	r15, 1
		
		ntc_measure();												// Mengambil data dari pengukuran suhu oleh NTC temperature sensor
		while(!ntc_data_is_ready());								// Menunggu data sampai siap untuk ditampilkan		
		volatile int8_t temperature = ntc_get_temperature();	// Mengambil hasil olah data dalam Celcius

		snprintf(strbuf, sizeof(strbuf), "Tempr : %3d",temperature);
    1d70:	0f 2e       	mov	r0, r31
    1d72:	fd e4       	ldi	r31, 0x4D	; 77
    1d74:	8f 2e       	mov	r8, r31
    1d76:	f0 e2       	ldi	r31, 0x20	; 32
    1d78:	9f 2e       	mov	r9, r31
    1d7a:	f0 2d       	mov	r31, r0
	int counter = 0;

	while (1)
	{	
		// Counter write
		snprintf(strbuf, sizeof(strbuf), "    Sensor Read (%2d)",counter);
    1d7c:	df 92       	push	r13
    1d7e:	cf 92       	push	r12
    1d80:	7f 92       	push	r7
    1d82:	6f 92       	push	r6
    1d84:	1f 92       	push	r1
    1d86:	bf 92       	push	r11
    1d88:	1f 93       	push	r17
    1d8a:	0f 93       	push	r16
		gfx_mono_draw_string(strbuf,0, 0, &sysfont);
    1d8c:	2e d2       	rcall	.+1116   	; 0x21ea <snprintf>
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e2       	ldi	r19, 0x20	; 32
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	c8 01       	movw	r24, r16
    1d98:	2c db       	rcall	.-2472   	; 0x13f2 <gfx_mono_draw_string>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1d9a:	8f b7       	in	r24, 0x3f	; 63
    1d9c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1d9e:	f8 94       	cli
	return flags;
    1da0:	9a 81       	ldd	r25, Y+2	; 0x02
    1da2:	f7 01       	movw	r30, r14
    1da4:	80 81       	ld	r24, Z
    1da6:	88 60       	ori	r24, 0x08	; 8
    1da8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1daa:	9f bf       	out	0x3f, r25	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	de bf       	out	0x3e, r29	; 62
		
		ntc_measure();												// Mengambil data dari pengukuran suhu oleh NTC temperature sensor
		while(!ntc_data_is_ready());								// Menunggu data sampai siap untuk ditampilkan		
    1db0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <ntc_data_is_ready>
    1db4:	88 23       	and	r24, r24
    1db6:	e1 f3       	breq	.-8      	; 0x1db0 <main+0xca>
		volatile int8_t temperature = ntc_get_temperature();	// Mengambil hasil olah data dalam Celcius
    1db8:	0e 94 4f 03 	call	0x69e	; 0x69e <ntc_get_temperature>
    1dbc:	8b 83       	std	Y+3, r24	; 0x03

		snprintf(strbuf, sizeof(strbuf), "Tempr : %3d",temperature);
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	08 2e       	mov	r0, r24
    1dc4:	00 0c       	add	r0, r0
    1dc6:	33 0b       	sbc	r19, r19
    1dc8:	3f 93       	push	r19
    1dca:	8f 93       	push	r24
    1dcc:	9f 92       	push	r9
    1dce:	8f 92       	push	r8
    1dd0:	1f 92       	push	r1
    1dd2:	bf 92       	push	r11
    1dd4:	1f 93       	push	r17
    1dd6:	0f 93       	push	r16
		gfx_mono_draw_string(strbuf,0, 8, &sysfont);
    1dd8:	08 d2       	rcall	.+1040   	; 0x21ea <snprintf>
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e2       	ldi	r19, 0x20	; 32
    1dde:	48 e0       	ldi	r20, 0x08	; 8
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	c8 01       	movw	r24, r16
    1de4:	06 db       	rcall	.-2548   	; 0x13f2 <gfx_mono_draw_string>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1de6:	8f b7       	in	r24, 0x3f	; 63
    1de8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1dea:	f8 94       	cli
	return flags;
    1dec:	99 81       	ldd	r25, Y+1	; 0x01
    1dee:	f7 01       	movw	r30, r14
    1df0:	80 81       	ld	r24, Z
    1df2:	84 60       	ori	r24, 0x04	; 4
    1df4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1df6:	9f bf       	out	0x3f, r25	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	de bf       	out	0x3e, r29	; 62

		lightsensor_measure();									// Mengambil data dari pengukuran intensitas oleh light sensor
		while(!lightsensor_data_is_ready());					// Menunggu data sampai siap untuk ditampilkan
    1dfc:	0e 94 e7 02 	call	0x5ce	; 0x5ce <lightsensor_data_is_ready>
    1e00:	88 23       	and	r24, r24
    1e02:	e1 f3       	breq	.-8      	; 0x1dfc <main+0x116>
		intensity += lightsensor_get_raw_value();				// Mengambil hasil olah data dalam raw ADC value
    1e04:	0e 94 7f 03 	call	0x6fe	; 0x6fe <lightsensor_get_raw_value>
    1e08:	09 2e       	mov	r0, r25
    1e0a:	00 0c       	add	r0, r0
    1e0c:	aa 0b       	sbc	r26, r26
    1e0e:	bb 0b       	sbc	r27, r27
    1e10:	28 0e       	add	r2, r24
    1e12:	39 1e       	adc	r3, r25
    1e14:	4a 1e       	adc	r4, r26
    1e16:	5b 1e       	adc	r5, r27
		
		
		snprintf(strbuf, sizeof(strbuf), "Live Light : %3d",lightsensor_get_raw_value());
    1e18:	0e 94 7f 03 	call	0x6fe	; 0x6fe <lightsensor_get_raw_value>
    1e1c:	9f 93       	push	r25
    1e1e:	8f 93       	push	r24
    1e20:	e9 e5       	ldi	r30, 0x59	; 89
    1e22:	f0 e2       	ldi	r31, 0x20	; 32
    1e24:	ff 93       	push	r31
    1e26:	ef 93       	push	r30
    1e28:	1f 92       	push	r1
    1e2a:	bf 92       	push	r11
    1e2c:	1f 93       	push	r17
    1e2e:	0f 93       	push	r16
		gfx_mono_draw_string(strbuf,0, 24, &sysfont);
    1e30:	dc d1       	rcall	.+952    	; 0x21ea <snprintf>
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e2       	ldi	r19, 0x20	; 32
    1e36:	48 e1       	ldi	r20, 0x18	; 24
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	c8 01       	movw	r24, r16

		// Dikarenakan hasil yang diperoleh merupakan data raw diperlukan sampling agar mendapatkan hasil yang baik
		if(iterations++ >= LIGHTSENSOR_NUM_SAMPLES) {
    1e3c:	da da       	rcall	.-2636   	; 0x13f2 <gfx_mono_draw_string>
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	93 e1       	ldi	r25, 0x13	; 19
    1e44:	9a 15       	cp	r25, r10
			iterations = 0;
			counter = 0;
			intensity /= LIGHTSENSOR_NUM_SAMPLES;
			
			snprintf(strbuf, sizeof(strbuf), "Light : %3d",intensity);
    1e46:	18 f5       	brcc	.+70     	; 0x1e8e <main+0x1a8>
    1e48:	c2 01       	movw	r24, r4
    1e4a:	b1 01       	movw	r22, r2
    1e4c:	24 e1       	ldi	r18, 0x14	; 20
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	50 e0       	ldi	r21, 0x00	; 0
    1e54:	21 d0       	rcall	.+66     	; 0x1e98 <__udivmodsi4>
    1e56:	5f 93       	push	r21
    1e58:	4f 93       	push	r20
    1e5a:	3f 93       	push	r19
    1e5c:	2f 93       	push	r18
    1e5e:	ee e5       	ldi	r30, 0x5E	; 94
    1e60:	f0 e2       	ldi	r31, 0x20	; 32
    1e62:	ff 93       	push	r31
    1e64:	ef 93       	push	r30
    1e66:	1f 92       	push	r1
    1e68:	bf 92       	push	r11
    1e6a:	1f 93       	push	r17
    1e6c:	0f 93       	push	r16
			gfx_mono_draw_string(strbuf,0, 16, &sysfont);
    1e6e:	bd d1       	rcall	.+890    	; 0x21ea <snprintf>
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e2       	ldi	r19, 0x20	; 32
    1e74:	40 e1       	ldi	r20, 0x10	; 16
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	c8 01       	movw	r24, r16
    1e7a:	bb da       	rcall	.-2698   	; 0x13f2 <gfx_mono_draw_string>
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	de bf       	out	0x3e, r29	; 62
		gfx_mono_draw_string(strbuf,0, 24, &sysfont);

		// Dikarenakan hasil yang diperoleh merupakan data raw diperlukan sampling agar mendapatkan hasil yang baik
		if(iterations++ >= LIGHTSENSOR_NUM_SAMPLES) {
			iterations = 0;
			counter = 0;
    1e80:	c1 2c       	mov	r12, r1
    1e82:	d1 2c       	mov	r13, r1
		snprintf(strbuf, sizeof(strbuf), "Live Light : %3d",lightsensor_get_raw_value());
		gfx_mono_draw_string(strbuf,0, 24, &sysfont);

		// Dikarenakan hasil yang diperoleh merupakan data raw diperlukan sampling agar mendapatkan hasil yang baik
		if(iterations++ >= LIGHTSENSOR_NUM_SAMPLES) {
			iterations = 0;
    1e84:	a1 2c       	mov	r10, r1
			intensity /= LIGHTSENSOR_NUM_SAMPLES;
			
			snprintf(strbuf, sizeof(strbuf), "Light : %3d",intensity);
			gfx_mono_draw_string(strbuf,0, 16, &sysfont);

			intensity = 0;
    1e86:	21 2c       	mov	r2, r1
    1e88:	31 2c       	mov	r3, r1
    1e8a:	21 01       	movw	r4, r2
    1e8c:	77 cf       	rjmp	.-274    	; 0x1d7c <main+0x96>
		
		snprintf(strbuf, sizeof(strbuf), "Live Light : %3d",lightsensor_get_raw_value());
		gfx_mono_draw_string(strbuf,0, 24, &sysfont);

		// Dikarenakan hasil yang diperoleh merupakan data raw diperlukan sampling agar mendapatkan hasil yang baik
		if(iterations++ >= LIGHTSENSOR_NUM_SAMPLES) {
    1e8e:	a3 94       	inc	r10
			snprintf(strbuf, sizeof(strbuf), "Light : %3d",intensity);
			gfx_mono_draw_string(strbuf,0, 16, &sysfont);

			intensity = 0;
		} else {
			counter++;
    1e90:	9f ef       	ldi	r25, 0xFF	; 255
    1e92:	c9 1a       	sub	r12, r25
    1e94:	d9 0a       	sbc	r13, r25
    1e96:	72 cf       	rjmp	.-284    	; 0x1d7c <main+0x96>

00001e98 <__udivmodsi4>:
    1e98:	a1 e2       	ldi	r26, 0x21	; 33
    1e9a:	1a 2e       	mov	r1, r26
    1e9c:	aa 1b       	sub	r26, r26
    1e9e:	bb 1b       	sub	r27, r27
    1ea0:	fd 01       	movw	r30, r26
    1ea2:	0d c0       	rjmp	.+26     	; 0x1ebe <__udivmodsi4_ep>

00001ea4 <__udivmodsi4_loop>:
    1ea4:	aa 1f       	adc	r26, r26
    1ea6:	bb 1f       	adc	r27, r27
    1ea8:	ee 1f       	adc	r30, r30
    1eaa:	ff 1f       	adc	r31, r31
    1eac:	a2 17       	cp	r26, r18
    1eae:	b3 07       	cpc	r27, r19
    1eb0:	e4 07       	cpc	r30, r20
    1eb2:	f5 07       	cpc	r31, r21
    1eb4:	20 f0       	brcs	.+8      	; 0x1ebe <__udivmodsi4_ep>
    1eb6:	a2 1b       	sub	r26, r18
    1eb8:	b3 0b       	sbc	r27, r19
    1eba:	e4 0b       	sbc	r30, r20
    1ebc:	f5 0b       	sbc	r31, r21

00001ebe <__udivmodsi4_ep>:
    1ebe:	66 1f       	adc	r22, r22
    1ec0:	77 1f       	adc	r23, r23
    1ec2:	88 1f       	adc	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	1a 94       	dec	r1
    1ec8:	69 f7       	brne	.-38     	; 0x1ea4 <__udivmodsi4_loop>
    1eca:	60 95       	com	r22
    1ecc:	70 95       	com	r23
    1ece:	80 95       	com	r24
    1ed0:	90 95       	com	r25
    1ed2:	9b 01       	movw	r18, r22
    1ed4:	ac 01       	movw	r20, r24
    1ed6:	bd 01       	movw	r22, r26
    1ed8:	cf 01       	movw	r24, r30
    1eda:	08 95       	ret

00001edc <__subsf3>:
    1edc:	50 58       	subi	r21, 0x80	; 128

00001ede <__addsf3>:
    1ede:	bb 27       	eor	r27, r27
    1ee0:	aa 27       	eor	r26, r26
    1ee2:	0e d0       	rcall	.+28     	; 0x1f00 <__addsf3x>
    1ee4:	e5 c0       	rjmp	.+458    	; 0x20b0 <__fp_round>
    1ee6:	d6 d0       	rcall	.+428    	; 0x2094 <__fp_pscA>
    1ee8:	30 f0       	brcs	.+12     	; 0x1ef6 <__addsf3+0x18>
    1eea:	db d0       	rcall	.+438    	; 0x20a2 <__fp_pscB>
    1eec:	20 f0       	brcs	.+8      	; 0x1ef6 <__addsf3+0x18>
    1eee:	31 f4       	brne	.+12     	; 0x1efc <__addsf3+0x1e>
    1ef0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ef2:	11 f4       	brne	.+4      	; 0x1ef8 <__addsf3+0x1a>
    1ef4:	1e f4       	brtc	.+6      	; 0x1efc <__addsf3+0x1e>
    1ef6:	cb c0       	rjmp	.+406    	; 0x208e <__fp_nan>
    1ef8:	0e f4       	brtc	.+2      	; 0x1efc <__addsf3+0x1e>
    1efa:	e0 95       	com	r30
    1efc:	e7 fb       	bst	r30, 7
    1efe:	c1 c0       	rjmp	.+386    	; 0x2082 <__fp_inf>

00001f00 <__addsf3x>:
    1f00:	e9 2f       	mov	r30, r25
    1f02:	e7 d0       	rcall	.+462    	; 0x20d2 <__fp_split3>
    1f04:	80 f3       	brcs	.-32     	; 0x1ee6 <__addsf3+0x8>
    1f06:	ba 17       	cp	r27, r26
    1f08:	62 07       	cpc	r22, r18
    1f0a:	73 07       	cpc	r23, r19
    1f0c:	84 07       	cpc	r24, r20
    1f0e:	95 07       	cpc	r25, r21
    1f10:	18 f0       	brcs	.+6      	; 0x1f18 <__addsf3x+0x18>
    1f12:	71 f4       	brne	.+28     	; 0x1f30 <__addsf3x+0x30>
    1f14:	9e f5       	brtc	.+102    	; 0x1f7c <__addsf3x+0x7c>
    1f16:	ff c0       	rjmp	.+510    	; 0x2116 <__fp_zero>
    1f18:	0e f4       	brtc	.+2      	; 0x1f1c <__addsf3x+0x1c>
    1f1a:	e0 95       	com	r30
    1f1c:	0b 2e       	mov	r0, r27
    1f1e:	ba 2f       	mov	r27, r26
    1f20:	a0 2d       	mov	r26, r0
    1f22:	0b 01       	movw	r0, r22
    1f24:	b9 01       	movw	r22, r18
    1f26:	90 01       	movw	r18, r0
    1f28:	0c 01       	movw	r0, r24
    1f2a:	ca 01       	movw	r24, r20
    1f2c:	a0 01       	movw	r20, r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	ff 27       	eor	r31, r31
    1f32:	59 1b       	sub	r21, r25
    1f34:	99 f0       	breq	.+38     	; 0x1f5c <__addsf3x+0x5c>
    1f36:	59 3f       	cpi	r21, 0xF9	; 249
    1f38:	50 f4       	brcc	.+20     	; 0x1f4e <__addsf3x+0x4e>
    1f3a:	50 3e       	cpi	r21, 0xE0	; 224
    1f3c:	68 f1       	brcs	.+90     	; 0x1f98 <__addsf3x+0x98>
    1f3e:	1a 16       	cp	r1, r26
    1f40:	f0 40       	sbci	r31, 0x00	; 0
    1f42:	a2 2f       	mov	r26, r18
    1f44:	23 2f       	mov	r18, r19
    1f46:	34 2f       	mov	r19, r20
    1f48:	44 27       	eor	r20, r20
    1f4a:	58 5f       	subi	r21, 0xF8	; 248
    1f4c:	f3 cf       	rjmp	.-26     	; 0x1f34 <__addsf3x+0x34>
    1f4e:	46 95       	lsr	r20
    1f50:	37 95       	ror	r19
    1f52:	27 95       	ror	r18
    1f54:	a7 95       	ror	r26
    1f56:	f0 40       	sbci	r31, 0x00	; 0
    1f58:	53 95       	inc	r21
    1f5a:	c9 f7       	brne	.-14     	; 0x1f4e <__addsf3x+0x4e>
    1f5c:	7e f4       	brtc	.+30     	; 0x1f7c <__addsf3x+0x7c>
    1f5e:	1f 16       	cp	r1, r31
    1f60:	ba 0b       	sbc	r27, r26
    1f62:	62 0b       	sbc	r22, r18
    1f64:	73 0b       	sbc	r23, r19
    1f66:	84 0b       	sbc	r24, r20
    1f68:	ba f0       	brmi	.+46     	; 0x1f98 <__addsf3x+0x98>
    1f6a:	91 50       	subi	r25, 0x01	; 1
    1f6c:	a1 f0       	breq	.+40     	; 0x1f96 <__addsf3x+0x96>
    1f6e:	ff 0f       	add	r31, r31
    1f70:	bb 1f       	adc	r27, r27
    1f72:	66 1f       	adc	r22, r22
    1f74:	77 1f       	adc	r23, r23
    1f76:	88 1f       	adc	r24, r24
    1f78:	c2 f7       	brpl	.-16     	; 0x1f6a <__addsf3x+0x6a>
    1f7a:	0e c0       	rjmp	.+28     	; 0x1f98 <__addsf3x+0x98>
    1f7c:	ba 0f       	add	r27, r26
    1f7e:	62 1f       	adc	r22, r18
    1f80:	73 1f       	adc	r23, r19
    1f82:	84 1f       	adc	r24, r20
    1f84:	48 f4       	brcc	.+18     	; 0x1f98 <__addsf3x+0x98>
    1f86:	87 95       	ror	r24
    1f88:	77 95       	ror	r23
    1f8a:	67 95       	ror	r22
    1f8c:	b7 95       	ror	r27
    1f8e:	f7 95       	ror	r31
    1f90:	9e 3f       	cpi	r25, 0xFE	; 254
    1f92:	08 f0       	brcs	.+2      	; 0x1f96 <__addsf3x+0x96>
    1f94:	b3 cf       	rjmp	.-154    	; 0x1efc <__addsf3+0x1e>
    1f96:	93 95       	inc	r25
    1f98:	88 0f       	add	r24, r24
    1f9a:	08 f0       	brcs	.+2      	; 0x1f9e <__addsf3x+0x9e>
    1f9c:	99 27       	eor	r25, r25
    1f9e:	ee 0f       	add	r30, r30
    1fa0:	97 95       	ror	r25
    1fa2:	87 95       	ror	r24
    1fa4:	08 95       	ret

00001fa6 <__fixsfsi>:
    1fa6:	04 d0       	rcall	.+8      	; 0x1fb0 <__fixunssfsi>
    1fa8:	68 94       	set
    1faa:	b1 11       	cpse	r27, r1
    1fac:	b5 c0       	rjmp	.+362    	; 0x2118 <__fp_szero>
    1fae:	08 95       	ret

00001fb0 <__fixunssfsi>:
    1fb0:	98 d0       	rcall	.+304    	; 0x20e2 <__fp_splitA>
    1fb2:	88 f0       	brcs	.+34     	; 0x1fd6 <__fixunssfsi+0x26>
    1fb4:	9f 57       	subi	r25, 0x7F	; 127
    1fb6:	90 f0       	brcs	.+36     	; 0x1fdc <__fixunssfsi+0x2c>
    1fb8:	b9 2f       	mov	r27, r25
    1fba:	99 27       	eor	r25, r25
    1fbc:	b7 51       	subi	r27, 0x17	; 23
    1fbe:	a0 f0       	brcs	.+40     	; 0x1fe8 <__fixunssfsi+0x38>
    1fc0:	d1 f0       	breq	.+52     	; 0x1ff6 <__fixunssfsi+0x46>
    1fc2:	66 0f       	add	r22, r22
    1fc4:	77 1f       	adc	r23, r23
    1fc6:	88 1f       	adc	r24, r24
    1fc8:	99 1f       	adc	r25, r25
    1fca:	1a f0       	brmi	.+6      	; 0x1fd2 <__fixunssfsi+0x22>
    1fcc:	ba 95       	dec	r27
    1fce:	c9 f7       	brne	.-14     	; 0x1fc2 <__fixunssfsi+0x12>
    1fd0:	12 c0       	rjmp	.+36     	; 0x1ff6 <__fixunssfsi+0x46>
    1fd2:	b1 30       	cpi	r27, 0x01	; 1
    1fd4:	81 f0       	breq	.+32     	; 0x1ff6 <__fixunssfsi+0x46>
    1fd6:	9f d0       	rcall	.+318    	; 0x2116 <__fp_zero>
    1fd8:	b1 e0       	ldi	r27, 0x01	; 1
    1fda:	08 95       	ret
    1fdc:	9c c0       	rjmp	.+312    	; 0x2116 <__fp_zero>
    1fde:	67 2f       	mov	r22, r23
    1fe0:	78 2f       	mov	r23, r24
    1fe2:	88 27       	eor	r24, r24
    1fe4:	b8 5f       	subi	r27, 0xF8	; 248
    1fe6:	39 f0       	breq	.+14     	; 0x1ff6 <__fixunssfsi+0x46>
    1fe8:	b9 3f       	cpi	r27, 0xF9	; 249
    1fea:	cc f3       	brlt	.-14     	; 0x1fde <__fixunssfsi+0x2e>
    1fec:	86 95       	lsr	r24
    1fee:	77 95       	ror	r23
    1ff0:	67 95       	ror	r22
    1ff2:	b3 95       	inc	r27
    1ff4:	d9 f7       	brne	.-10     	; 0x1fec <__fixunssfsi+0x3c>
    1ff6:	3e f4       	brtc	.+14     	; 0x2006 <__fixunssfsi+0x56>
    1ff8:	90 95       	com	r25
    1ffa:	80 95       	com	r24
    1ffc:	70 95       	com	r23
    1ffe:	61 95       	neg	r22
    2000:	7f 4f       	sbci	r23, 0xFF	; 255
    2002:	8f 4f       	sbci	r24, 0xFF	; 255
    2004:	9f 4f       	sbci	r25, 0xFF	; 255
    2006:	08 95       	ret

00002008 <__floatunsisf>:
    2008:	e8 94       	clt
    200a:	09 c0       	rjmp	.+18     	; 0x201e <__floatsisf+0x12>

0000200c <__floatsisf>:
    200c:	97 fb       	bst	r25, 7
    200e:	3e f4       	brtc	.+14     	; 0x201e <__floatsisf+0x12>
    2010:	90 95       	com	r25
    2012:	80 95       	com	r24
    2014:	70 95       	com	r23
    2016:	61 95       	neg	r22
    2018:	7f 4f       	sbci	r23, 0xFF	; 255
    201a:	8f 4f       	sbci	r24, 0xFF	; 255
    201c:	9f 4f       	sbci	r25, 0xFF	; 255
    201e:	99 23       	and	r25, r25
    2020:	a9 f0       	breq	.+42     	; 0x204c <__floatsisf+0x40>
    2022:	f9 2f       	mov	r31, r25
    2024:	96 e9       	ldi	r25, 0x96	; 150
    2026:	bb 27       	eor	r27, r27
    2028:	93 95       	inc	r25
    202a:	f6 95       	lsr	r31
    202c:	87 95       	ror	r24
    202e:	77 95       	ror	r23
    2030:	67 95       	ror	r22
    2032:	b7 95       	ror	r27
    2034:	f1 11       	cpse	r31, r1
    2036:	f8 cf       	rjmp	.-16     	; 0x2028 <__floatsisf+0x1c>
    2038:	fa f4       	brpl	.+62     	; 0x2078 <__floatsisf+0x6c>
    203a:	bb 0f       	add	r27, r27
    203c:	11 f4       	brne	.+4      	; 0x2042 <__floatsisf+0x36>
    203e:	60 ff       	sbrs	r22, 0
    2040:	1b c0       	rjmp	.+54     	; 0x2078 <__floatsisf+0x6c>
    2042:	6f 5f       	subi	r22, 0xFF	; 255
    2044:	7f 4f       	sbci	r23, 0xFF	; 255
    2046:	8f 4f       	sbci	r24, 0xFF	; 255
    2048:	9f 4f       	sbci	r25, 0xFF	; 255
    204a:	16 c0       	rjmp	.+44     	; 0x2078 <__floatsisf+0x6c>
    204c:	88 23       	and	r24, r24
    204e:	11 f0       	breq	.+4      	; 0x2054 <__floatsisf+0x48>
    2050:	96 e9       	ldi	r25, 0x96	; 150
    2052:	11 c0       	rjmp	.+34     	; 0x2076 <__floatsisf+0x6a>
    2054:	77 23       	and	r23, r23
    2056:	21 f0       	breq	.+8      	; 0x2060 <__floatsisf+0x54>
    2058:	9e e8       	ldi	r25, 0x8E	; 142
    205a:	87 2f       	mov	r24, r23
    205c:	76 2f       	mov	r23, r22
    205e:	05 c0       	rjmp	.+10     	; 0x206a <__floatsisf+0x5e>
    2060:	66 23       	and	r22, r22
    2062:	71 f0       	breq	.+28     	; 0x2080 <__floatsisf+0x74>
    2064:	96 e8       	ldi	r25, 0x86	; 134
    2066:	86 2f       	mov	r24, r22
    2068:	70 e0       	ldi	r23, 0x00	; 0
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	2a f0       	brmi	.+10     	; 0x2078 <__floatsisf+0x6c>
    206e:	9a 95       	dec	r25
    2070:	66 0f       	add	r22, r22
    2072:	77 1f       	adc	r23, r23
    2074:	88 1f       	adc	r24, r24
    2076:	da f7       	brpl	.-10     	; 0x206e <__floatsisf+0x62>
    2078:	88 0f       	add	r24, r24
    207a:	96 95       	lsr	r25
    207c:	87 95       	ror	r24
    207e:	97 f9       	bld	r25, 7
    2080:	08 95       	ret

00002082 <__fp_inf>:
    2082:	97 f9       	bld	r25, 7
    2084:	9f 67       	ori	r25, 0x7F	; 127
    2086:	80 e8       	ldi	r24, 0x80	; 128
    2088:	70 e0       	ldi	r23, 0x00	; 0
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	08 95       	ret

0000208e <__fp_nan>:
    208e:	9f ef       	ldi	r25, 0xFF	; 255
    2090:	80 ec       	ldi	r24, 0xC0	; 192
    2092:	08 95       	ret

00002094 <__fp_pscA>:
    2094:	00 24       	eor	r0, r0
    2096:	0a 94       	dec	r0
    2098:	16 16       	cp	r1, r22
    209a:	17 06       	cpc	r1, r23
    209c:	18 06       	cpc	r1, r24
    209e:	09 06       	cpc	r0, r25
    20a0:	08 95       	ret

000020a2 <__fp_pscB>:
    20a2:	00 24       	eor	r0, r0
    20a4:	0a 94       	dec	r0
    20a6:	12 16       	cp	r1, r18
    20a8:	13 06       	cpc	r1, r19
    20aa:	14 06       	cpc	r1, r20
    20ac:	05 06       	cpc	r0, r21
    20ae:	08 95       	ret

000020b0 <__fp_round>:
    20b0:	09 2e       	mov	r0, r25
    20b2:	03 94       	inc	r0
    20b4:	00 0c       	add	r0, r0
    20b6:	11 f4       	brne	.+4      	; 0x20bc <__fp_round+0xc>
    20b8:	88 23       	and	r24, r24
    20ba:	52 f0       	brmi	.+20     	; 0x20d0 <__fp_round+0x20>
    20bc:	bb 0f       	add	r27, r27
    20be:	40 f4       	brcc	.+16     	; 0x20d0 <__fp_round+0x20>
    20c0:	bf 2b       	or	r27, r31
    20c2:	11 f4       	brne	.+4      	; 0x20c8 <__fp_round+0x18>
    20c4:	60 ff       	sbrs	r22, 0
    20c6:	04 c0       	rjmp	.+8      	; 0x20d0 <__fp_round+0x20>
    20c8:	6f 5f       	subi	r22, 0xFF	; 255
    20ca:	7f 4f       	sbci	r23, 0xFF	; 255
    20cc:	8f 4f       	sbci	r24, 0xFF	; 255
    20ce:	9f 4f       	sbci	r25, 0xFF	; 255
    20d0:	08 95       	ret

000020d2 <__fp_split3>:
    20d2:	57 fd       	sbrc	r21, 7
    20d4:	90 58       	subi	r25, 0x80	; 128
    20d6:	44 0f       	add	r20, r20
    20d8:	55 1f       	adc	r21, r21
    20da:	59 f0       	breq	.+22     	; 0x20f2 <__fp_splitA+0x10>
    20dc:	5f 3f       	cpi	r21, 0xFF	; 255
    20de:	71 f0       	breq	.+28     	; 0x20fc <__fp_splitA+0x1a>
    20e0:	47 95       	ror	r20

000020e2 <__fp_splitA>:
    20e2:	88 0f       	add	r24, r24
    20e4:	97 fb       	bst	r25, 7
    20e6:	99 1f       	adc	r25, r25
    20e8:	61 f0       	breq	.+24     	; 0x2102 <__fp_splitA+0x20>
    20ea:	9f 3f       	cpi	r25, 0xFF	; 255
    20ec:	79 f0       	breq	.+30     	; 0x210c <__fp_splitA+0x2a>
    20ee:	87 95       	ror	r24
    20f0:	08 95       	ret
    20f2:	12 16       	cp	r1, r18
    20f4:	13 06       	cpc	r1, r19
    20f6:	14 06       	cpc	r1, r20
    20f8:	55 1f       	adc	r21, r21
    20fa:	f2 cf       	rjmp	.-28     	; 0x20e0 <__fp_split3+0xe>
    20fc:	46 95       	lsr	r20
    20fe:	f1 df       	rcall	.-30     	; 0x20e2 <__fp_splitA>
    2100:	08 c0       	rjmp	.+16     	; 0x2112 <__fp_splitA+0x30>
    2102:	16 16       	cp	r1, r22
    2104:	17 06       	cpc	r1, r23
    2106:	18 06       	cpc	r1, r24
    2108:	99 1f       	adc	r25, r25
    210a:	f1 cf       	rjmp	.-30     	; 0x20ee <__fp_splitA+0xc>
    210c:	86 95       	lsr	r24
    210e:	71 05       	cpc	r23, r1
    2110:	61 05       	cpc	r22, r1
    2112:	08 94       	sec
    2114:	08 95       	ret

00002116 <__fp_zero>:
    2116:	e8 94       	clt

00002118 <__fp_szero>:
    2118:	bb 27       	eor	r27, r27
    211a:	66 27       	eor	r22, r22
    211c:	77 27       	eor	r23, r23
    211e:	cb 01       	movw	r24, r22
    2120:	97 f9       	bld	r25, 7
    2122:	08 95       	ret

00002124 <__mulsf3>:
    2124:	0b d0       	rcall	.+22     	; 0x213c <__mulsf3x>
    2126:	c4 cf       	rjmp	.-120    	; 0x20b0 <__fp_round>
    2128:	b5 df       	rcall	.-150    	; 0x2094 <__fp_pscA>
    212a:	28 f0       	brcs	.+10     	; 0x2136 <__mulsf3+0x12>
    212c:	ba df       	rcall	.-140    	; 0x20a2 <__fp_pscB>
    212e:	18 f0       	brcs	.+6      	; 0x2136 <__mulsf3+0x12>
    2130:	95 23       	and	r25, r21
    2132:	09 f0       	breq	.+2      	; 0x2136 <__mulsf3+0x12>
    2134:	a6 cf       	rjmp	.-180    	; 0x2082 <__fp_inf>
    2136:	ab cf       	rjmp	.-170    	; 0x208e <__fp_nan>
    2138:	11 24       	eor	r1, r1
    213a:	ee cf       	rjmp	.-36     	; 0x2118 <__fp_szero>

0000213c <__mulsf3x>:
    213c:	ca df       	rcall	.-108    	; 0x20d2 <__fp_split3>
    213e:	a0 f3       	brcs	.-24     	; 0x2128 <__mulsf3+0x4>

00002140 <__mulsf3_pse>:
    2140:	95 9f       	mul	r25, r21
    2142:	d1 f3       	breq	.-12     	; 0x2138 <__mulsf3+0x14>
    2144:	95 0f       	add	r25, r21
    2146:	50 e0       	ldi	r21, 0x00	; 0
    2148:	55 1f       	adc	r21, r21
    214a:	62 9f       	mul	r22, r18
    214c:	f0 01       	movw	r30, r0
    214e:	72 9f       	mul	r23, r18
    2150:	bb 27       	eor	r27, r27
    2152:	f0 0d       	add	r31, r0
    2154:	b1 1d       	adc	r27, r1
    2156:	63 9f       	mul	r22, r19
    2158:	aa 27       	eor	r26, r26
    215a:	f0 0d       	add	r31, r0
    215c:	b1 1d       	adc	r27, r1
    215e:	aa 1f       	adc	r26, r26
    2160:	64 9f       	mul	r22, r20
    2162:	66 27       	eor	r22, r22
    2164:	b0 0d       	add	r27, r0
    2166:	a1 1d       	adc	r26, r1
    2168:	66 1f       	adc	r22, r22
    216a:	82 9f       	mul	r24, r18
    216c:	22 27       	eor	r18, r18
    216e:	b0 0d       	add	r27, r0
    2170:	a1 1d       	adc	r26, r1
    2172:	62 1f       	adc	r22, r18
    2174:	73 9f       	mul	r23, r19
    2176:	b0 0d       	add	r27, r0
    2178:	a1 1d       	adc	r26, r1
    217a:	62 1f       	adc	r22, r18
    217c:	83 9f       	mul	r24, r19
    217e:	a0 0d       	add	r26, r0
    2180:	61 1d       	adc	r22, r1
    2182:	22 1f       	adc	r18, r18
    2184:	74 9f       	mul	r23, r20
    2186:	33 27       	eor	r19, r19
    2188:	a0 0d       	add	r26, r0
    218a:	61 1d       	adc	r22, r1
    218c:	23 1f       	adc	r18, r19
    218e:	84 9f       	mul	r24, r20
    2190:	60 0d       	add	r22, r0
    2192:	21 1d       	adc	r18, r1
    2194:	82 2f       	mov	r24, r18
    2196:	76 2f       	mov	r23, r22
    2198:	6a 2f       	mov	r22, r26
    219a:	11 24       	eor	r1, r1
    219c:	9f 57       	subi	r25, 0x7F	; 127
    219e:	50 40       	sbci	r21, 0x00	; 0
    21a0:	8a f0       	brmi	.+34     	; 0x21c4 <__mulsf3_pse+0x84>
    21a2:	e1 f0       	breq	.+56     	; 0x21dc <__mulsf3_pse+0x9c>
    21a4:	88 23       	and	r24, r24
    21a6:	4a f0       	brmi	.+18     	; 0x21ba <__mulsf3_pse+0x7a>
    21a8:	ee 0f       	add	r30, r30
    21aa:	ff 1f       	adc	r31, r31
    21ac:	bb 1f       	adc	r27, r27
    21ae:	66 1f       	adc	r22, r22
    21b0:	77 1f       	adc	r23, r23
    21b2:	88 1f       	adc	r24, r24
    21b4:	91 50       	subi	r25, 0x01	; 1
    21b6:	50 40       	sbci	r21, 0x00	; 0
    21b8:	a9 f7       	brne	.-22     	; 0x21a4 <__mulsf3_pse+0x64>
    21ba:	9e 3f       	cpi	r25, 0xFE	; 254
    21bc:	51 05       	cpc	r21, r1
    21be:	70 f0       	brcs	.+28     	; 0x21dc <__mulsf3_pse+0x9c>
    21c0:	60 cf       	rjmp	.-320    	; 0x2082 <__fp_inf>
    21c2:	aa cf       	rjmp	.-172    	; 0x2118 <__fp_szero>
    21c4:	5f 3f       	cpi	r21, 0xFF	; 255
    21c6:	ec f3       	brlt	.-6      	; 0x21c2 <__mulsf3_pse+0x82>
    21c8:	98 3e       	cpi	r25, 0xE8	; 232
    21ca:	dc f3       	brlt	.-10     	; 0x21c2 <__mulsf3_pse+0x82>
    21cc:	86 95       	lsr	r24
    21ce:	77 95       	ror	r23
    21d0:	67 95       	ror	r22
    21d2:	b7 95       	ror	r27
    21d4:	f7 95       	ror	r31
    21d6:	e7 95       	ror	r30
    21d8:	9f 5f       	subi	r25, 0xFF	; 255
    21da:	c1 f7       	brne	.-16     	; 0x21cc <__mulsf3_pse+0x8c>
    21dc:	fe 2b       	or	r31, r30
    21de:	88 0f       	add	r24, r24
    21e0:	91 1d       	adc	r25, r1
    21e2:	96 95       	lsr	r25
    21e4:	87 95       	ror	r24
    21e6:	97 f9       	bld	r25, 7
    21e8:	08 95       	ret

000021ea <snprintf>:
    21ea:	0f 93       	push	r16
    21ec:	1f 93       	push	r17
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	2e 97       	sbiw	r28, 0x0e	; 14
    21f8:	cd bf       	out	0x3d, r28	; 61
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0e 89       	ldd	r16, Y+22	; 0x16
    21fe:	1f 89       	ldd	r17, Y+23	; 0x17
    2200:	88 8d       	ldd	r24, Y+24	; 0x18
    2202:	99 8d       	ldd	r25, Y+25	; 0x19
    2204:	26 e0       	ldi	r18, 0x06	; 6
    2206:	2c 83       	std	Y+4, r18	; 0x04
    2208:	09 83       	std	Y+1, r16	; 0x01
    220a:	1a 83       	std	Y+2, r17	; 0x02
    220c:	97 ff       	sbrs	r25, 7
    220e:	02 c0       	rjmp	.+4      	; 0x2214 <snprintf+0x2a>
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e8       	ldi	r25, 0x80	; 128
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	8d 83       	std	Y+5, r24	; 0x05
    2218:	9e 83       	std	Y+6, r25	; 0x06
    221a:	ae 01       	movw	r20, r28
    221c:	44 5e       	subi	r20, 0xE4	; 228
    221e:	5f 4f       	sbci	r21, 0xFF	; 255
    2220:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2222:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2224:	ce 01       	movw	r24, r28
    2226:	01 96       	adiw	r24, 0x01	; 1
    2228:	16 d0       	rcall	.+44     	; 0x2256 <vfprintf>
    222a:	4d 81       	ldd	r20, Y+5	; 0x05
    222c:	5e 81       	ldd	r21, Y+6	; 0x06
    222e:	57 fd       	sbrc	r21, 7
    2230:	0a c0       	rjmp	.+20     	; 0x2246 <snprintf+0x5c>
    2232:	2f 81       	ldd	r18, Y+7	; 0x07
    2234:	38 85       	ldd	r19, Y+8	; 0x08
    2236:	42 17       	cp	r20, r18
    2238:	53 07       	cpc	r21, r19
    223a:	0c f4       	brge	.+2      	; 0x223e <snprintf+0x54>
    223c:	9a 01       	movw	r18, r20
    223e:	f8 01       	movw	r30, r16
    2240:	e2 0f       	add	r30, r18
    2242:	f3 1f       	adc	r31, r19
    2244:	10 82       	st	Z, r1
    2246:	2e 96       	adiw	r28, 0x0e	; 14
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	df 91       	pop	r29
    224e:	cf 91       	pop	r28
    2250:	1f 91       	pop	r17
    2252:	0f 91       	pop	r16
    2254:	08 95       	ret

00002256 <vfprintf>:
    2256:	2f 92       	push	r2
    2258:	3f 92       	push	r3
    225a:	4f 92       	push	r4
    225c:	5f 92       	push	r5
    225e:	6f 92       	push	r6
    2260:	7f 92       	push	r7
    2262:	8f 92       	push	r8
    2264:	9f 92       	push	r9
    2266:	af 92       	push	r10
    2268:	bf 92       	push	r11
    226a:	cf 92       	push	r12
    226c:	df 92       	push	r13
    226e:	ef 92       	push	r14
    2270:	ff 92       	push	r15
    2272:	0f 93       	push	r16
    2274:	1f 93       	push	r17
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	2b 97       	sbiw	r28, 0x0b	; 11
    2280:	cd bf       	out	0x3d, r28	; 61
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	6c 01       	movw	r12, r24
    2286:	7b 01       	movw	r14, r22
    2288:	8a 01       	movw	r16, r20
    228a:	fc 01       	movw	r30, r24
    228c:	16 82       	std	Z+6, r1	; 0x06
    228e:	17 82       	std	Z+7, r1	; 0x07
    2290:	83 81       	ldd	r24, Z+3	; 0x03
    2292:	81 ff       	sbrs	r24, 1
    2294:	bf c1       	rjmp	.+894    	; 0x2614 <vfprintf+0x3be>
    2296:	ce 01       	movw	r24, r28
    2298:	01 96       	adiw	r24, 0x01	; 1
    229a:	3c 01       	movw	r6, r24
    229c:	f6 01       	movw	r30, r12
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	f7 01       	movw	r30, r14
    22a2:	93 fd       	sbrc	r25, 3
    22a4:	85 91       	lpm	r24, Z+
    22a6:	93 ff       	sbrs	r25, 3
    22a8:	81 91       	ld	r24, Z+
    22aa:	7f 01       	movw	r14, r30
    22ac:	88 23       	and	r24, r24
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <vfprintf+0x5c>
    22b0:	ad c1       	rjmp	.+858    	; 0x260c <vfprintf+0x3b6>
    22b2:	85 32       	cpi	r24, 0x25	; 37
    22b4:	39 f4       	brne	.+14     	; 0x22c4 <vfprintf+0x6e>
    22b6:	93 fd       	sbrc	r25, 3
    22b8:	85 91       	lpm	r24, Z+
    22ba:	93 ff       	sbrs	r25, 3
    22bc:	81 91       	ld	r24, Z+
    22be:	7f 01       	movw	r14, r30
    22c0:	85 32       	cpi	r24, 0x25	; 37
    22c2:	21 f4       	brne	.+8      	; 0x22cc <vfprintf+0x76>
    22c4:	b6 01       	movw	r22, r12
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	d3 d1       	rcall	.+934    	; 0x2670 <fputc>
    22ca:	e8 cf       	rjmp	.-48     	; 0x229c <vfprintf+0x46>
    22cc:	91 2c       	mov	r9, r1
    22ce:	21 2c       	mov	r2, r1
    22d0:	31 2c       	mov	r3, r1
    22d2:	ff e1       	ldi	r31, 0x1F	; 31
    22d4:	f3 15       	cp	r31, r3
    22d6:	d8 f0       	brcs	.+54     	; 0x230e <vfprintf+0xb8>
    22d8:	8b 32       	cpi	r24, 0x2B	; 43
    22da:	79 f0       	breq	.+30     	; 0x22fa <vfprintf+0xa4>
    22dc:	38 f4       	brcc	.+14     	; 0x22ec <vfprintf+0x96>
    22de:	80 32       	cpi	r24, 0x20	; 32
    22e0:	79 f0       	breq	.+30     	; 0x2300 <vfprintf+0xaa>
    22e2:	83 32       	cpi	r24, 0x23	; 35
    22e4:	a1 f4       	brne	.+40     	; 0x230e <vfprintf+0xb8>
    22e6:	23 2d       	mov	r18, r3
    22e8:	20 61       	ori	r18, 0x10	; 16
    22ea:	1d c0       	rjmp	.+58     	; 0x2326 <vfprintf+0xd0>
    22ec:	8d 32       	cpi	r24, 0x2D	; 45
    22ee:	61 f0       	breq	.+24     	; 0x2308 <vfprintf+0xb2>
    22f0:	80 33       	cpi	r24, 0x30	; 48
    22f2:	69 f4       	brne	.+26     	; 0x230e <vfprintf+0xb8>
    22f4:	23 2d       	mov	r18, r3
    22f6:	21 60       	ori	r18, 0x01	; 1
    22f8:	16 c0       	rjmp	.+44     	; 0x2326 <vfprintf+0xd0>
    22fa:	83 2d       	mov	r24, r3
    22fc:	82 60       	ori	r24, 0x02	; 2
    22fe:	38 2e       	mov	r3, r24
    2300:	e3 2d       	mov	r30, r3
    2302:	e4 60       	ori	r30, 0x04	; 4
    2304:	3e 2e       	mov	r3, r30
    2306:	2a c0       	rjmp	.+84     	; 0x235c <vfprintf+0x106>
    2308:	f3 2d       	mov	r31, r3
    230a:	f8 60       	ori	r31, 0x08	; 8
    230c:	1d c0       	rjmp	.+58     	; 0x2348 <vfprintf+0xf2>
    230e:	37 fc       	sbrc	r3, 7
    2310:	2d c0       	rjmp	.+90     	; 0x236c <vfprintf+0x116>
    2312:	20 ed       	ldi	r18, 0xD0	; 208
    2314:	28 0f       	add	r18, r24
    2316:	2a 30       	cpi	r18, 0x0A	; 10
    2318:	40 f0       	brcs	.+16     	; 0x232a <vfprintf+0xd4>
    231a:	8e 32       	cpi	r24, 0x2E	; 46
    231c:	b9 f4       	brne	.+46     	; 0x234c <vfprintf+0xf6>
    231e:	36 fc       	sbrc	r3, 6
    2320:	75 c1       	rjmp	.+746    	; 0x260c <vfprintf+0x3b6>
    2322:	23 2d       	mov	r18, r3
    2324:	20 64       	ori	r18, 0x40	; 64
    2326:	32 2e       	mov	r3, r18
    2328:	19 c0       	rjmp	.+50     	; 0x235c <vfprintf+0x106>
    232a:	36 fe       	sbrs	r3, 6
    232c:	06 c0       	rjmp	.+12     	; 0x233a <vfprintf+0xe4>
    232e:	8a e0       	ldi	r24, 0x0A	; 10
    2330:	98 9e       	mul	r9, r24
    2332:	20 0d       	add	r18, r0
    2334:	11 24       	eor	r1, r1
    2336:	92 2e       	mov	r9, r18
    2338:	11 c0       	rjmp	.+34     	; 0x235c <vfprintf+0x106>
    233a:	ea e0       	ldi	r30, 0x0A	; 10
    233c:	2e 9e       	mul	r2, r30
    233e:	20 0d       	add	r18, r0
    2340:	11 24       	eor	r1, r1
    2342:	22 2e       	mov	r2, r18
    2344:	f3 2d       	mov	r31, r3
    2346:	f0 62       	ori	r31, 0x20	; 32
    2348:	3f 2e       	mov	r3, r31
    234a:	08 c0       	rjmp	.+16     	; 0x235c <vfprintf+0x106>
    234c:	8c 36       	cpi	r24, 0x6C	; 108
    234e:	21 f4       	brne	.+8      	; 0x2358 <vfprintf+0x102>
    2350:	83 2d       	mov	r24, r3
    2352:	80 68       	ori	r24, 0x80	; 128
    2354:	38 2e       	mov	r3, r24
    2356:	02 c0       	rjmp	.+4      	; 0x235c <vfprintf+0x106>
    2358:	88 36       	cpi	r24, 0x68	; 104
    235a:	41 f4       	brne	.+16     	; 0x236c <vfprintf+0x116>
    235c:	f7 01       	movw	r30, r14
    235e:	93 fd       	sbrc	r25, 3
    2360:	85 91       	lpm	r24, Z+
    2362:	93 ff       	sbrs	r25, 3
    2364:	81 91       	ld	r24, Z+
    2366:	7f 01       	movw	r14, r30
    2368:	81 11       	cpse	r24, r1
    236a:	b3 cf       	rjmp	.-154    	; 0x22d2 <vfprintf+0x7c>
    236c:	98 2f       	mov	r25, r24
    236e:	9f 7d       	andi	r25, 0xDF	; 223
    2370:	95 54       	subi	r25, 0x45	; 69
    2372:	93 30       	cpi	r25, 0x03	; 3
    2374:	28 f4       	brcc	.+10     	; 0x2380 <vfprintf+0x12a>
    2376:	0c 5f       	subi	r16, 0xFC	; 252
    2378:	1f 4f       	sbci	r17, 0xFF	; 255
    237a:	9f e3       	ldi	r25, 0x3F	; 63
    237c:	99 83       	std	Y+1, r25	; 0x01
    237e:	0d c0       	rjmp	.+26     	; 0x239a <vfprintf+0x144>
    2380:	83 36       	cpi	r24, 0x63	; 99
    2382:	31 f0       	breq	.+12     	; 0x2390 <vfprintf+0x13a>
    2384:	83 37       	cpi	r24, 0x73	; 115
    2386:	71 f0       	breq	.+28     	; 0x23a4 <vfprintf+0x14e>
    2388:	83 35       	cpi	r24, 0x53	; 83
    238a:	09 f0       	breq	.+2      	; 0x238e <vfprintf+0x138>
    238c:	55 c0       	rjmp	.+170    	; 0x2438 <vfprintf+0x1e2>
    238e:	20 c0       	rjmp	.+64     	; 0x23d0 <vfprintf+0x17a>
    2390:	f8 01       	movw	r30, r16
    2392:	80 81       	ld	r24, Z
    2394:	89 83       	std	Y+1, r24	; 0x01
    2396:	0e 5f       	subi	r16, 0xFE	; 254
    2398:	1f 4f       	sbci	r17, 0xFF	; 255
    239a:	88 24       	eor	r8, r8
    239c:	83 94       	inc	r8
    239e:	91 2c       	mov	r9, r1
    23a0:	53 01       	movw	r10, r6
    23a2:	12 c0       	rjmp	.+36     	; 0x23c8 <vfprintf+0x172>
    23a4:	28 01       	movw	r4, r16
    23a6:	f2 e0       	ldi	r31, 0x02	; 2
    23a8:	4f 0e       	add	r4, r31
    23aa:	51 1c       	adc	r5, r1
    23ac:	f8 01       	movw	r30, r16
    23ae:	a0 80       	ld	r10, Z
    23b0:	b1 80       	ldd	r11, Z+1	; 0x01
    23b2:	36 fe       	sbrs	r3, 6
    23b4:	03 c0       	rjmp	.+6      	; 0x23bc <vfprintf+0x166>
    23b6:	69 2d       	mov	r22, r9
    23b8:	70 e0       	ldi	r23, 0x00	; 0
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <vfprintf+0x16a>
    23bc:	6f ef       	ldi	r22, 0xFF	; 255
    23be:	7f ef       	ldi	r23, 0xFF	; 255
    23c0:	c5 01       	movw	r24, r10
    23c2:	4b d1       	rcall	.+662    	; 0x265a <strnlen>
    23c4:	4c 01       	movw	r8, r24
    23c6:	82 01       	movw	r16, r4
    23c8:	f3 2d       	mov	r31, r3
    23ca:	ff 77       	andi	r31, 0x7F	; 127
    23cc:	3f 2e       	mov	r3, r31
    23ce:	15 c0       	rjmp	.+42     	; 0x23fa <vfprintf+0x1a4>
    23d0:	28 01       	movw	r4, r16
    23d2:	22 e0       	ldi	r18, 0x02	; 2
    23d4:	42 0e       	add	r4, r18
    23d6:	51 1c       	adc	r5, r1
    23d8:	f8 01       	movw	r30, r16
    23da:	a0 80       	ld	r10, Z
    23dc:	b1 80       	ldd	r11, Z+1	; 0x01
    23de:	36 fe       	sbrs	r3, 6
    23e0:	03 c0       	rjmp	.+6      	; 0x23e8 <vfprintf+0x192>
    23e2:	69 2d       	mov	r22, r9
    23e4:	70 e0       	ldi	r23, 0x00	; 0
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <vfprintf+0x196>
    23e8:	6f ef       	ldi	r22, 0xFF	; 255
    23ea:	7f ef       	ldi	r23, 0xFF	; 255
    23ec:	c5 01       	movw	r24, r10
    23ee:	2a d1       	rcall	.+596    	; 0x2644 <strnlen_P>
    23f0:	4c 01       	movw	r8, r24
    23f2:	f3 2d       	mov	r31, r3
    23f4:	f0 68       	ori	r31, 0x80	; 128
    23f6:	3f 2e       	mov	r3, r31
    23f8:	82 01       	movw	r16, r4
    23fa:	33 fc       	sbrc	r3, 3
    23fc:	19 c0       	rjmp	.+50     	; 0x2430 <vfprintf+0x1da>
    23fe:	82 2d       	mov	r24, r2
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	88 16       	cp	r8, r24
    2404:	99 06       	cpc	r9, r25
    2406:	a0 f4       	brcc	.+40     	; 0x2430 <vfprintf+0x1da>
    2408:	b6 01       	movw	r22, r12
    240a:	80 e2       	ldi	r24, 0x20	; 32
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	30 d1       	rcall	.+608    	; 0x2670 <fputc>
    2410:	2a 94       	dec	r2
    2412:	f5 cf       	rjmp	.-22     	; 0x23fe <vfprintf+0x1a8>
    2414:	f5 01       	movw	r30, r10
    2416:	37 fc       	sbrc	r3, 7
    2418:	85 91       	lpm	r24, Z+
    241a:	37 fe       	sbrs	r3, 7
    241c:	81 91       	ld	r24, Z+
    241e:	5f 01       	movw	r10, r30
    2420:	b6 01       	movw	r22, r12
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	25 d1       	rcall	.+586    	; 0x2670 <fputc>
    2426:	21 10       	cpse	r2, r1
    2428:	2a 94       	dec	r2
    242a:	21 e0       	ldi	r18, 0x01	; 1
    242c:	82 1a       	sub	r8, r18
    242e:	91 08       	sbc	r9, r1
    2430:	81 14       	cp	r8, r1
    2432:	91 04       	cpc	r9, r1
    2434:	79 f7       	brne	.-34     	; 0x2414 <vfprintf+0x1be>
    2436:	e1 c0       	rjmp	.+450    	; 0x25fa <vfprintf+0x3a4>
    2438:	84 36       	cpi	r24, 0x64	; 100
    243a:	11 f0       	breq	.+4      	; 0x2440 <vfprintf+0x1ea>
    243c:	89 36       	cpi	r24, 0x69	; 105
    243e:	39 f5       	brne	.+78     	; 0x248e <vfprintf+0x238>
    2440:	f8 01       	movw	r30, r16
    2442:	37 fe       	sbrs	r3, 7
    2444:	07 c0       	rjmp	.+14     	; 0x2454 <vfprintf+0x1fe>
    2446:	60 81       	ld	r22, Z
    2448:	71 81       	ldd	r23, Z+1	; 0x01
    244a:	82 81       	ldd	r24, Z+2	; 0x02
    244c:	93 81       	ldd	r25, Z+3	; 0x03
    244e:	0c 5f       	subi	r16, 0xFC	; 252
    2450:	1f 4f       	sbci	r17, 0xFF	; 255
    2452:	08 c0       	rjmp	.+16     	; 0x2464 <vfprintf+0x20e>
    2454:	60 81       	ld	r22, Z
    2456:	71 81       	ldd	r23, Z+1	; 0x01
    2458:	07 2e       	mov	r0, r23
    245a:	00 0c       	add	r0, r0
    245c:	88 0b       	sbc	r24, r24
    245e:	99 0b       	sbc	r25, r25
    2460:	0e 5f       	subi	r16, 0xFE	; 254
    2462:	1f 4f       	sbci	r17, 0xFF	; 255
    2464:	f3 2d       	mov	r31, r3
    2466:	ff 76       	andi	r31, 0x6F	; 111
    2468:	3f 2e       	mov	r3, r31
    246a:	97 ff       	sbrs	r25, 7
    246c:	09 c0       	rjmp	.+18     	; 0x2480 <vfprintf+0x22a>
    246e:	90 95       	com	r25
    2470:	80 95       	com	r24
    2472:	70 95       	com	r23
    2474:	61 95       	neg	r22
    2476:	7f 4f       	sbci	r23, 0xFF	; 255
    2478:	8f 4f       	sbci	r24, 0xFF	; 255
    247a:	9f 4f       	sbci	r25, 0xFF	; 255
    247c:	f0 68       	ori	r31, 0x80	; 128
    247e:	3f 2e       	mov	r3, r31
    2480:	2a e0       	ldi	r18, 0x0A	; 10
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	a3 01       	movw	r20, r6
    2486:	30 d1       	rcall	.+608    	; 0x26e8 <__ultoa_invert>
    2488:	88 2e       	mov	r8, r24
    248a:	86 18       	sub	r8, r6
    248c:	44 c0       	rjmp	.+136    	; 0x2516 <vfprintf+0x2c0>
    248e:	85 37       	cpi	r24, 0x75	; 117
    2490:	31 f4       	brne	.+12     	; 0x249e <vfprintf+0x248>
    2492:	23 2d       	mov	r18, r3
    2494:	2f 7e       	andi	r18, 0xEF	; 239
    2496:	b2 2e       	mov	r11, r18
    2498:	2a e0       	ldi	r18, 0x0A	; 10
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	25 c0       	rjmp	.+74     	; 0x24e8 <vfprintf+0x292>
    249e:	93 2d       	mov	r25, r3
    24a0:	99 7f       	andi	r25, 0xF9	; 249
    24a2:	b9 2e       	mov	r11, r25
    24a4:	8f 36       	cpi	r24, 0x6F	; 111
    24a6:	c1 f0       	breq	.+48     	; 0x24d8 <vfprintf+0x282>
    24a8:	18 f4       	brcc	.+6      	; 0x24b0 <vfprintf+0x25a>
    24aa:	88 35       	cpi	r24, 0x58	; 88
    24ac:	79 f0       	breq	.+30     	; 0x24cc <vfprintf+0x276>
    24ae:	ae c0       	rjmp	.+348    	; 0x260c <vfprintf+0x3b6>
    24b0:	80 37       	cpi	r24, 0x70	; 112
    24b2:	19 f0       	breq	.+6      	; 0x24ba <vfprintf+0x264>
    24b4:	88 37       	cpi	r24, 0x78	; 120
    24b6:	21 f0       	breq	.+8      	; 0x24c0 <vfprintf+0x26a>
    24b8:	a9 c0       	rjmp	.+338    	; 0x260c <vfprintf+0x3b6>
    24ba:	e9 2f       	mov	r30, r25
    24bc:	e0 61       	ori	r30, 0x10	; 16
    24be:	be 2e       	mov	r11, r30
    24c0:	b4 fe       	sbrs	r11, 4
    24c2:	0d c0       	rjmp	.+26     	; 0x24de <vfprintf+0x288>
    24c4:	fb 2d       	mov	r31, r11
    24c6:	f4 60       	ori	r31, 0x04	; 4
    24c8:	bf 2e       	mov	r11, r31
    24ca:	09 c0       	rjmp	.+18     	; 0x24de <vfprintf+0x288>
    24cc:	34 fe       	sbrs	r3, 4
    24ce:	0a c0       	rjmp	.+20     	; 0x24e4 <vfprintf+0x28e>
    24d0:	29 2f       	mov	r18, r25
    24d2:	26 60       	ori	r18, 0x06	; 6
    24d4:	b2 2e       	mov	r11, r18
    24d6:	06 c0       	rjmp	.+12     	; 0x24e4 <vfprintf+0x28e>
    24d8:	28 e0       	ldi	r18, 0x08	; 8
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	05 c0       	rjmp	.+10     	; 0x24e8 <vfprintf+0x292>
    24de:	20 e1       	ldi	r18, 0x10	; 16
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	02 c0       	rjmp	.+4      	; 0x24e8 <vfprintf+0x292>
    24e4:	20 e1       	ldi	r18, 0x10	; 16
    24e6:	32 e0       	ldi	r19, 0x02	; 2
    24e8:	f8 01       	movw	r30, r16
    24ea:	b7 fe       	sbrs	r11, 7
    24ec:	07 c0       	rjmp	.+14     	; 0x24fc <vfprintf+0x2a6>
    24ee:	60 81       	ld	r22, Z
    24f0:	71 81       	ldd	r23, Z+1	; 0x01
    24f2:	82 81       	ldd	r24, Z+2	; 0x02
    24f4:	93 81       	ldd	r25, Z+3	; 0x03
    24f6:	0c 5f       	subi	r16, 0xFC	; 252
    24f8:	1f 4f       	sbci	r17, 0xFF	; 255
    24fa:	06 c0       	rjmp	.+12     	; 0x2508 <vfprintf+0x2b2>
    24fc:	60 81       	ld	r22, Z
    24fe:	71 81       	ldd	r23, Z+1	; 0x01
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	0e 5f       	subi	r16, 0xFE	; 254
    2506:	1f 4f       	sbci	r17, 0xFF	; 255
    2508:	a3 01       	movw	r20, r6
    250a:	ee d0       	rcall	.+476    	; 0x26e8 <__ultoa_invert>
    250c:	88 2e       	mov	r8, r24
    250e:	86 18       	sub	r8, r6
    2510:	fb 2d       	mov	r31, r11
    2512:	ff 77       	andi	r31, 0x7F	; 127
    2514:	3f 2e       	mov	r3, r31
    2516:	36 fe       	sbrs	r3, 6
    2518:	0d c0       	rjmp	.+26     	; 0x2534 <vfprintf+0x2de>
    251a:	23 2d       	mov	r18, r3
    251c:	2e 7f       	andi	r18, 0xFE	; 254
    251e:	a2 2e       	mov	r10, r18
    2520:	89 14       	cp	r8, r9
    2522:	58 f4       	brcc	.+22     	; 0x253a <vfprintf+0x2e4>
    2524:	34 fe       	sbrs	r3, 4
    2526:	0b c0       	rjmp	.+22     	; 0x253e <vfprintf+0x2e8>
    2528:	32 fc       	sbrc	r3, 2
    252a:	09 c0       	rjmp	.+18     	; 0x253e <vfprintf+0x2e8>
    252c:	83 2d       	mov	r24, r3
    252e:	8e 7e       	andi	r24, 0xEE	; 238
    2530:	a8 2e       	mov	r10, r24
    2532:	05 c0       	rjmp	.+10     	; 0x253e <vfprintf+0x2e8>
    2534:	b8 2c       	mov	r11, r8
    2536:	a3 2c       	mov	r10, r3
    2538:	03 c0       	rjmp	.+6      	; 0x2540 <vfprintf+0x2ea>
    253a:	b8 2c       	mov	r11, r8
    253c:	01 c0       	rjmp	.+2      	; 0x2540 <vfprintf+0x2ea>
    253e:	b9 2c       	mov	r11, r9
    2540:	a4 fe       	sbrs	r10, 4
    2542:	0f c0       	rjmp	.+30     	; 0x2562 <vfprintf+0x30c>
    2544:	fe 01       	movw	r30, r28
    2546:	e8 0d       	add	r30, r8
    2548:	f1 1d       	adc	r31, r1
    254a:	80 81       	ld	r24, Z
    254c:	80 33       	cpi	r24, 0x30	; 48
    254e:	21 f4       	brne	.+8      	; 0x2558 <vfprintf+0x302>
    2550:	9a 2d       	mov	r25, r10
    2552:	99 7e       	andi	r25, 0xE9	; 233
    2554:	a9 2e       	mov	r10, r25
    2556:	09 c0       	rjmp	.+18     	; 0x256a <vfprintf+0x314>
    2558:	a2 fe       	sbrs	r10, 2
    255a:	06 c0       	rjmp	.+12     	; 0x2568 <vfprintf+0x312>
    255c:	b3 94       	inc	r11
    255e:	b3 94       	inc	r11
    2560:	04 c0       	rjmp	.+8      	; 0x256a <vfprintf+0x314>
    2562:	8a 2d       	mov	r24, r10
    2564:	86 78       	andi	r24, 0x86	; 134
    2566:	09 f0       	breq	.+2      	; 0x256a <vfprintf+0x314>
    2568:	b3 94       	inc	r11
    256a:	a3 fc       	sbrc	r10, 3
    256c:	10 c0       	rjmp	.+32     	; 0x258e <vfprintf+0x338>
    256e:	a0 fe       	sbrs	r10, 0
    2570:	06 c0       	rjmp	.+12     	; 0x257e <vfprintf+0x328>
    2572:	b2 14       	cp	r11, r2
    2574:	80 f4       	brcc	.+32     	; 0x2596 <vfprintf+0x340>
    2576:	28 0c       	add	r2, r8
    2578:	92 2c       	mov	r9, r2
    257a:	9b 18       	sub	r9, r11
    257c:	0d c0       	rjmp	.+26     	; 0x2598 <vfprintf+0x342>
    257e:	b2 14       	cp	r11, r2
    2580:	58 f4       	brcc	.+22     	; 0x2598 <vfprintf+0x342>
    2582:	b6 01       	movw	r22, r12
    2584:	80 e2       	ldi	r24, 0x20	; 32
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	73 d0       	rcall	.+230    	; 0x2670 <fputc>
    258a:	b3 94       	inc	r11
    258c:	f8 cf       	rjmp	.-16     	; 0x257e <vfprintf+0x328>
    258e:	b2 14       	cp	r11, r2
    2590:	18 f4       	brcc	.+6      	; 0x2598 <vfprintf+0x342>
    2592:	2b 18       	sub	r2, r11
    2594:	02 c0       	rjmp	.+4      	; 0x259a <vfprintf+0x344>
    2596:	98 2c       	mov	r9, r8
    2598:	21 2c       	mov	r2, r1
    259a:	a4 fe       	sbrs	r10, 4
    259c:	0f c0       	rjmp	.+30     	; 0x25bc <vfprintf+0x366>
    259e:	b6 01       	movw	r22, r12
    25a0:	80 e3       	ldi	r24, 0x30	; 48
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	65 d0       	rcall	.+202    	; 0x2670 <fputc>
    25a6:	a2 fe       	sbrs	r10, 2
    25a8:	16 c0       	rjmp	.+44     	; 0x25d6 <vfprintf+0x380>
    25aa:	a1 fc       	sbrc	r10, 1
    25ac:	03 c0       	rjmp	.+6      	; 0x25b4 <vfprintf+0x35e>
    25ae:	88 e7       	ldi	r24, 0x78	; 120
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	02 c0       	rjmp	.+4      	; 0x25b8 <vfprintf+0x362>
    25b4:	88 e5       	ldi	r24, 0x58	; 88
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	b6 01       	movw	r22, r12
    25ba:	0c c0       	rjmp	.+24     	; 0x25d4 <vfprintf+0x37e>
    25bc:	8a 2d       	mov	r24, r10
    25be:	86 78       	andi	r24, 0x86	; 134
    25c0:	51 f0       	breq	.+20     	; 0x25d6 <vfprintf+0x380>
    25c2:	a1 fe       	sbrs	r10, 1
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <vfprintf+0x374>
    25c6:	8b e2       	ldi	r24, 0x2B	; 43
    25c8:	01 c0       	rjmp	.+2      	; 0x25cc <vfprintf+0x376>
    25ca:	80 e2       	ldi	r24, 0x20	; 32
    25cc:	a7 fc       	sbrc	r10, 7
    25ce:	8d e2       	ldi	r24, 0x2D	; 45
    25d0:	b6 01       	movw	r22, r12
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	4d d0       	rcall	.+154    	; 0x2670 <fputc>
    25d6:	89 14       	cp	r8, r9
    25d8:	30 f4       	brcc	.+12     	; 0x25e6 <vfprintf+0x390>
    25da:	b6 01       	movw	r22, r12
    25dc:	80 e3       	ldi	r24, 0x30	; 48
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	47 d0       	rcall	.+142    	; 0x2670 <fputc>
    25e2:	9a 94       	dec	r9
    25e4:	f8 cf       	rjmp	.-16     	; 0x25d6 <vfprintf+0x380>
    25e6:	8a 94       	dec	r8
    25e8:	f3 01       	movw	r30, r6
    25ea:	e8 0d       	add	r30, r8
    25ec:	f1 1d       	adc	r31, r1
    25ee:	80 81       	ld	r24, Z
    25f0:	b6 01       	movw	r22, r12
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	3d d0       	rcall	.+122    	; 0x2670 <fputc>
    25f6:	81 10       	cpse	r8, r1
    25f8:	f6 cf       	rjmp	.-20     	; 0x25e6 <vfprintf+0x390>
    25fa:	22 20       	and	r2, r2
    25fc:	09 f4       	brne	.+2      	; 0x2600 <vfprintf+0x3aa>
    25fe:	4e ce       	rjmp	.-868    	; 0x229c <vfprintf+0x46>
    2600:	b6 01       	movw	r22, r12
    2602:	80 e2       	ldi	r24, 0x20	; 32
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	34 d0       	rcall	.+104    	; 0x2670 <fputc>
    2608:	2a 94       	dec	r2
    260a:	f7 cf       	rjmp	.-18     	; 0x25fa <vfprintf+0x3a4>
    260c:	f6 01       	movw	r30, r12
    260e:	86 81       	ldd	r24, Z+6	; 0x06
    2610:	97 81       	ldd	r25, Z+7	; 0x07
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <vfprintf+0x3c2>
    2614:	8f ef       	ldi	r24, 0xFF	; 255
    2616:	9f ef       	ldi	r25, 0xFF	; 255
    2618:	2b 96       	adiw	r28, 0x0b	; 11
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	de bf       	out	0x3e, r29	; 62
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	1f 91       	pop	r17
    2624:	0f 91       	pop	r16
    2626:	ff 90       	pop	r15
    2628:	ef 90       	pop	r14
    262a:	df 90       	pop	r13
    262c:	cf 90       	pop	r12
    262e:	bf 90       	pop	r11
    2630:	af 90       	pop	r10
    2632:	9f 90       	pop	r9
    2634:	8f 90       	pop	r8
    2636:	7f 90       	pop	r7
    2638:	6f 90       	pop	r6
    263a:	5f 90       	pop	r5
    263c:	4f 90       	pop	r4
    263e:	3f 90       	pop	r3
    2640:	2f 90       	pop	r2
    2642:	08 95       	ret

00002644 <strnlen_P>:
    2644:	fc 01       	movw	r30, r24
    2646:	05 90       	lpm	r0, Z+
    2648:	61 50       	subi	r22, 0x01	; 1
    264a:	70 40       	sbci	r23, 0x00	; 0
    264c:	01 10       	cpse	r0, r1
    264e:	d8 f7       	brcc	.-10     	; 0x2646 <strnlen_P+0x2>
    2650:	80 95       	com	r24
    2652:	90 95       	com	r25
    2654:	8e 0f       	add	r24, r30
    2656:	9f 1f       	adc	r25, r31
    2658:	08 95       	ret

0000265a <strnlen>:
    265a:	fc 01       	movw	r30, r24
    265c:	61 50       	subi	r22, 0x01	; 1
    265e:	70 40       	sbci	r23, 0x00	; 0
    2660:	01 90       	ld	r0, Z+
    2662:	01 10       	cpse	r0, r1
    2664:	d8 f7       	brcc	.-10     	; 0x265c <strnlen+0x2>
    2666:	80 95       	com	r24
    2668:	90 95       	com	r25
    266a:	8e 0f       	add	r24, r30
    266c:	9f 1f       	adc	r25, r31
    266e:	08 95       	ret

00002670 <fputc>:
    2670:	0f 93       	push	r16
    2672:	1f 93       	push	r17
    2674:	cf 93       	push	r28
    2676:	df 93       	push	r29
    2678:	fb 01       	movw	r30, r22
    267a:	23 81       	ldd	r18, Z+3	; 0x03
    267c:	21 fd       	sbrc	r18, 1
    267e:	03 c0       	rjmp	.+6      	; 0x2686 <fputc+0x16>
    2680:	8f ef       	ldi	r24, 0xFF	; 255
    2682:	9f ef       	ldi	r25, 0xFF	; 255
    2684:	2c c0       	rjmp	.+88     	; 0x26de <fputc+0x6e>
    2686:	22 ff       	sbrs	r18, 2
    2688:	16 c0       	rjmp	.+44     	; 0x26b6 <fputc+0x46>
    268a:	46 81       	ldd	r20, Z+6	; 0x06
    268c:	57 81       	ldd	r21, Z+7	; 0x07
    268e:	24 81       	ldd	r18, Z+4	; 0x04
    2690:	35 81       	ldd	r19, Z+5	; 0x05
    2692:	42 17       	cp	r20, r18
    2694:	53 07       	cpc	r21, r19
    2696:	44 f4       	brge	.+16     	; 0x26a8 <fputc+0x38>
    2698:	a0 81       	ld	r26, Z
    269a:	b1 81       	ldd	r27, Z+1	; 0x01
    269c:	9d 01       	movw	r18, r26
    269e:	2f 5f       	subi	r18, 0xFF	; 255
    26a0:	3f 4f       	sbci	r19, 0xFF	; 255
    26a2:	20 83       	st	Z, r18
    26a4:	31 83       	std	Z+1, r19	; 0x01
    26a6:	8c 93       	st	X, r24
    26a8:	26 81       	ldd	r18, Z+6	; 0x06
    26aa:	37 81       	ldd	r19, Z+7	; 0x07
    26ac:	2f 5f       	subi	r18, 0xFF	; 255
    26ae:	3f 4f       	sbci	r19, 0xFF	; 255
    26b0:	26 83       	std	Z+6, r18	; 0x06
    26b2:	37 83       	std	Z+7, r19	; 0x07
    26b4:	14 c0       	rjmp	.+40     	; 0x26de <fputc+0x6e>
    26b6:	8b 01       	movw	r16, r22
    26b8:	ec 01       	movw	r28, r24
    26ba:	fb 01       	movw	r30, r22
    26bc:	00 84       	ldd	r0, Z+8	; 0x08
    26be:	f1 85       	ldd	r31, Z+9	; 0x09
    26c0:	e0 2d       	mov	r30, r0
    26c2:	19 95       	eicall
    26c4:	89 2b       	or	r24, r25
    26c6:	e1 f6       	brne	.-72     	; 0x2680 <fputc+0x10>
    26c8:	d8 01       	movw	r26, r16
    26ca:	16 96       	adiw	r26, 0x06	; 6
    26cc:	8d 91       	ld	r24, X+
    26ce:	9c 91       	ld	r25, X
    26d0:	17 97       	sbiw	r26, 0x07	; 7
    26d2:	01 96       	adiw	r24, 0x01	; 1
    26d4:	16 96       	adiw	r26, 0x06	; 6
    26d6:	8d 93       	st	X+, r24
    26d8:	9c 93       	st	X, r25
    26da:	17 97       	sbiw	r26, 0x07	; 7
    26dc:	ce 01       	movw	r24, r28
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	1f 91       	pop	r17
    26e4:	0f 91       	pop	r16
    26e6:	08 95       	ret

000026e8 <__ultoa_invert>:
    26e8:	fa 01       	movw	r30, r20
    26ea:	aa 27       	eor	r26, r26
    26ec:	28 30       	cpi	r18, 0x08	; 8
    26ee:	51 f1       	breq	.+84     	; 0x2744 <__ultoa_invert+0x5c>
    26f0:	20 31       	cpi	r18, 0x10	; 16
    26f2:	81 f1       	breq	.+96     	; 0x2754 <__ultoa_invert+0x6c>
    26f4:	e8 94       	clt
    26f6:	6f 93       	push	r22
    26f8:	6e 7f       	andi	r22, 0xFE	; 254
    26fa:	6e 5f       	subi	r22, 0xFE	; 254
    26fc:	7f 4f       	sbci	r23, 0xFF	; 255
    26fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2700:	9f 4f       	sbci	r25, 0xFF	; 255
    2702:	af 4f       	sbci	r26, 0xFF	; 255
    2704:	b1 e0       	ldi	r27, 0x01	; 1
    2706:	3e d0       	rcall	.+124    	; 0x2784 <__ultoa_invert+0x9c>
    2708:	b4 e0       	ldi	r27, 0x04	; 4
    270a:	3c d0       	rcall	.+120    	; 0x2784 <__ultoa_invert+0x9c>
    270c:	67 0f       	add	r22, r23
    270e:	78 1f       	adc	r23, r24
    2710:	89 1f       	adc	r24, r25
    2712:	9a 1f       	adc	r25, r26
    2714:	a1 1d       	adc	r26, r1
    2716:	68 0f       	add	r22, r24
    2718:	79 1f       	adc	r23, r25
    271a:	8a 1f       	adc	r24, r26
    271c:	91 1d       	adc	r25, r1
    271e:	a1 1d       	adc	r26, r1
    2720:	6a 0f       	add	r22, r26
    2722:	71 1d       	adc	r23, r1
    2724:	81 1d       	adc	r24, r1
    2726:	91 1d       	adc	r25, r1
    2728:	a1 1d       	adc	r26, r1
    272a:	20 d0       	rcall	.+64     	; 0x276c <__ultoa_invert+0x84>
    272c:	09 f4       	brne	.+2      	; 0x2730 <__ultoa_invert+0x48>
    272e:	68 94       	set
    2730:	3f 91       	pop	r19
    2732:	2a e0       	ldi	r18, 0x0A	; 10
    2734:	26 9f       	mul	r18, r22
    2736:	11 24       	eor	r1, r1
    2738:	30 19       	sub	r19, r0
    273a:	30 5d       	subi	r19, 0xD0	; 208
    273c:	31 93       	st	Z+, r19
    273e:	de f6       	brtc	.-74     	; 0x26f6 <__ultoa_invert+0xe>
    2740:	cf 01       	movw	r24, r30
    2742:	08 95       	ret
    2744:	46 2f       	mov	r20, r22
    2746:	47 70       	andi	r20, 0x07	; 7
    2748:	40 5d       	subi	r20, 0xD0	; 208
    274a:	41 93       	st	Z+, r20
    274c:	b3 e0       	ldi	r27, 0x03	; 3
    274e:	0f d0       	rcall	.+30     	; 0x276e <__ultoa_invert+0x86>
    2750:	c9 f7       	brne	.-14     	; 0x2744 <__ultoa_invert+0x5c>
    2752:	f6 cf       	rjmp	.-20     	; 0x2740 <__ultoa_invert+0x58>
    2754:	46 2f       	mov	r20, r22
    2756:	4f 70       	andi	r20, 0x0F	; 15
    2758:	40 5d       	subi	r20, 0xD0	; 208
    275a:	4a 33       	cpi	r20, 0x3A	; 58
    275c:	18 f0       	brcs	.+6      	; 0x2764 <__ultoa_invert+0x7c>
    275e:	49 5d       	subi	r20, 0xD9	; 217
    2760:	31 fd       	sbrc	r19, 1
    2762:	40 52       	subi	r20, 0x20	; 32
    2764:	41 93       	st	Z+, r20
    2766:	02 d0       	rcall	.+4      	; 0x276c <__ultoa_invert+0x84>
    2768:	a9 f7       	brne	.-22     	; 0x2754 <__ultoa_invert+0x6c>
    276a:	ea cf       	rjmp	.-44     	; 0x2740 <__ultoa_invert+0x58>
    276c:	b4 e0       	ldi	r27, 0x04	; 4
    276e:	a6 95       	lsr	r26
    2770:	97 95       	ror	r25
    2772:	87 95       	ror	r24
    2774:	77 95       	ror	r23
    2776:	67 95       	ror	r22
    2778:	ba 95       	dec	r27
    277a:	c9 f7       	brne	.-14     	; 0x276e <__ultoa_invert+0x86>
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	61 05       	cpc	r22, r1
    2780:	71 05       	cpc	r23, r1
    2782:	08 95       	ret
    2784:	9b 01       	movw	r18, r22
    2786:	ac 01       	movw	r20, r24
    2788:	0a 2e       	mov	r0, r26
    278a:	06 94       	lsr	r0
    278c:	57 95       	ror	r21
    278e:	47 95       	ror	r20
    2790:	37 95       	ror	r19
    2792:	27 95       	ror	r18
    2794:	ba 95       	dec	r27
    2796:	c9 f7       	brne	.-14     	; 0x278a <__ultoa_invert+0xa2>
    2798:	62 0f       	add	r22, r18
    279a:	73 1f       	adc	r23, r19
    279c:	84 1f       	adc	r24, r20
    279e:	95 1f       	adc	r25, r21
    27a0:	a0 1d       	adc	r26, r0
    27a2:	08 95       	ret

000027a4 <_exit>:
    27a4:	f8 94       	cli

000027a6 <__stop_program>:
    27a6:	ff cf       	rjmp	.-2      	; 0x27a6 <__stop_program>
